(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{526:function(_,v,e){"use strict";e.r(v);var o=e(4),c=Object(o.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey},scopedSlots:_._u([{key:"record",fn:function(){return[e("ul",[e("li",[_._v("在计算机中任何数据的本质都是"),e("code",[_._v("比特(Bit)")]),_._v("，也就是二进制")]),_._v(" "),e("li",[_._v("每一个值所代表的是"),e("code",[_._v('"一块"')]),_._v("二进制信息")]),_._v(" "),e("li",[_._v("js 中所表示最大的数值近似 它的近似值为 "),e("code",[_._v("1.7976931348623157 x 10308")]),_._v("。使用"),e("code",[_._v("Number.MAX_VALUE")]),_._v("可以拿到具体数值")]),_._v(" "),e("li",[_._v("js 在四则运算中 "),e("code",[_._v("*")]),_._v(" 代表乘法； "),e("code",[_._v("/")]),_._v(" 代表除法； "),e("code",[_._v("+")]),_._v(" 代表加法； "),e("code",[_._v("-")]),_._v(" 代表减法；"),e("code",[_._v("%")]),_._v("代表取余数操作；")]),_._v(" "),e("li",[_._v("在其他语义下 "),e("code",[_._v("+")]),_._v(" 也可以表示字符串拼接, "),e("code",[_._v("-")]),_._v(" 也可以表示一个数的负数")]),_._v(" "),e("li",[e("code",[_._v("Infinity")]),_._v(" 代表数值大正无穷大，"),e("code",[_._v("-Infinity")]),_._v("表示数值的负无穷大，"),e("code",[_._v("NaN")]),_._v("表示不是一个数字，但"),e("code",[_._v("NaN")]),_._v("却归属为数字类型")]),_._v(" "),e("li",[_._v("使用单引号"),e("code",[_._v("('')")]),_._v("、双引号"),e("code",[_._v('("")')]),_._v("、反引号都可以标记他是一个字符串，引号中的内容则是字符串的值")]),_._v(" "),e("li",[e("code",[_._v('"\\"')]),_._v("用来转义特殊含义的字符串，比如字符串中需要出现单引号，可以这样表示: this ' is dog")]),_._v(" "),e("li",[_._v("js中使用"),e("code",[_._v("unicode")]),_._v("标准来执行字符串 ？")]),_._v(" "),e("li",[_._v("反引号通常被称为模版字符串，使用模版字符串可以使用很多字符串操作的技巧")]),_._v(" "),e("li",[_._v("运算符可以分为一元运算符、二元运算符、三元运算符")]),_._v(" "),e("li",[_._v("布尔值只有两个值，一个代表打开(true)，一个代表关闭(false)")]),_._v(" "),e("li",[_._v('"<", ">"是传统的 "大于"、"小于"的比较符号。使用他们会得到一个布尔值。')]),_._v(" "),e("li",[_._v("字符串值的比较是比较"),e("code",[_._v("unicode")]),_._v("编码")]),_._v(" "),e("li",[_._v("在js中只有一个值不等于它自己，他就是"),e("code",[_._v("NaN")])]),_._v(" "),e("li",[_._v("js中的逻辑运算符：与、或、否、三元逻辑运算")]),_._v(" "),e("li",[e("code",[_._v("&&")]),_._v(" 运算符表示逻辑与，它是一个二元运算符，只有当给定的值都为"),e("code",[_._v("true")]),_._v("的时候它才为"),e("code",[_._v("true")])]),_._v(" "),e("li",[e("code",[_._v("||")]),_._v(" 运算符表示逻辑或，只要有一个值为"),e("code",[_._v("true")]),_._v("的时候，结果都为"),e("code",[_._v("true")])]),_._v(" "),e("li",[e("code",[_._v("!")]),_._v("表示逻辑否，是一个一元运算符。用于给值取反，比如一个"),e("code",[_._v("true")]),_._v("，用"),e("code",[_._v("!")]),_._v("逻辑否运算后会得到"),e("code",[_._v("false")])]),_._v(" "),e("li",[e("code",[_._v("true ? 1: 2")]),_._v(" 表示三元运算符, "),e("code",[_._v("?")]),_._v("前面值为条件，如果条件为"),e("code",[_._v("true")]),_._v(",则使用"),e("code",[_._v("?")]),_._v("后面的值。如果"),e("code",[_._v("?")]),_._v("前面的值为"),e("code",[_._v("false")]),_._v("，则使用"),e("code",[_._v(":")]),_._v("后面的值")]),_._v(" "),e("li",[e("code",[_._v("null")]),_._v(" 、"),e("code",[_._v("undefined")]),_._v(" 在js中表示缺少有意义的值。他们本身就是值，但是他们本身不代表任何信息。在大部分语义下"),e("code",[_._v("null")]),_._v("、"),e("code",[_._v("undefined")]),_._v("所表示的含义是等价的")]),_._v(" "),e("li",[e("code",[_._v("js")]),_._v("在进行值比较或者值运算过程中会将值原本的类型转为其他数据类型。在比较的过程中可以使用 "),e("code",[_._v("===")]),_._v("运算符 或者 "),e("code",[_._v("!==")]),_._v("运算符来确保类型不会转换")]),_._v(" "),e("li",[_._v("逻辑运算符 "),e("code",[_._v("&&")]),_._v(" 和 "),e("code",[_._v("||")]),_._v(" 的使用技巧有一种是叫做短路计算。如果 "),e("code",[_._v("||")]),_._v(" 左侧的值会转为"),e("code",[_._v("true")]),_._v("，那么将永远不会计算 "),e("code",[_._v("||")]),_._v(" 右侧的值。这种行为称为短路计算。而 "),e("code",[_._v("&&")]),_._v(" 运算符的左侧的值可以转为"),e("code",[_._v("true")]),_._v("，那么才会计算"),e("code",[_._v("&&右侧的值")]),_._v("。如果"),e("code",[_._v("&&")]),_._v("左侧的值可以转为"),e("code",[_._v("false")]),_._v(", 那么将永远不会计算右侧值。")])])]},proxy:!0},{key:"keynote",fn:function(){return[e("ul",[e("li",[_._v("比特(Bit)")]),_._v(" "),e("li",[_._v("值")]),_._v(" "),e("li",[_._v("数字")]),_._v(" "),e("li",[_._v("算术")]),_._v(" "),e("li",[_._v("三个特殊的数字")]),_._v(" "),e("li",[_._v("字符串")]),_._v(" "),e("li",[_._v("字符串转义")]),_._v(" "),e("li",[_._v("字符串 unicode 标准")]),_._v(" "),e("li",[_._v("模版字符串")]),_._v(" "),e("li",[_._v("运算符")]),_._v(" "),e("li",[_._v("boolean")]),_._v(" "),e("li",[_._v("值的比较")]),_._v(" "),e("li",[_._v("逻辑运算")]),_._v(" "),e("li",[_._v("条件运算符")]),_._v(" "),e("li",[_._v("空值")]),_._v(" "),e("li",[_._v("类型转换")]),_._v(" "),e("li",[_._v("逻辑运算符的短路")])])]},proxy:!0},{key:"summary",fn:function(){return[e("ul",[e("li",[_._v("本章节学习了计算机中的数据是使用"),e("code",[_._v("比特")]),_._v("来表示的，也就是"),e("code",[_._v("二进制数据")])]),_._v(" "),e("li",[_._v("了解了js中的五种基本数据类型："),e("code",[_._v("数字(Number)")]),_._v("、"),e("code",[_._v("字符串(String)")]),_._v("、"),e("code",[_._v("布尔值(Boolean)")]),_._v("、"),e("code",[_._v("null")]),_._v("、"),e("code",[_._v("undefined")])]),_._v(" "),e("li",[_._v("js语言的一个特性是在运算过程中会将数据类型做"),e("code",[_._v("自动转换")]),_._v("，这可能会带来一种意想不到的结果，也可以借助这种特性做一些其他语言很难做到的逻辑处理")]),_._v(" "),e("li",[_._v("在数字的章节中我们了解到数字有最大值的限制，也了解有三个特殊含义的数字，他们分别是正无穷大: "),e("code",[_._v("Infinity")]),_._v(", 负无穷大: "),e("code",[_._v("-Infinity")]),_._v(" 和用来表示值不是数字："),e("code",[_._v("NaN")])]),_._v(" "),e("li",[_._v("在字符串章节中了解到字符串的定义方式分别有单引号、双引号、反引号，使用 \\ 可以做特殊字符串的转义。字符的大小比较是比较"),e("code",[_._v("unicode")]),_._v(" 大小。使用反引号可以做很多简单便捷的字符串操作")]),_._v(" "),e("li",[_._v("了解到js值的比较方式，他们分别有: ==、!=、===、!==、<、>、<=、=> 。在进行值的比较过程中如果不同数据类型进行比较会做数据类型的转换，其中 === 和 !== 比较运算并不会做数据类型上的转换。")]),_._v(" "),e("li",[_._v("js中的运算符有"),e("code",[_._v("逻辑与 &&")]),_._v("、"),e("code",[_._v("逻辑或||")]),_._v("。明白了一元运算、二元运算、三元运算的含义。其中一元表示只对一个值做运算，二元运算表示是两个值之间的计算，三元运算是三个值之间的计算")])])]},proxy:!0}])})}),[],!1,null,null,null);v.default=c.exports}}]);