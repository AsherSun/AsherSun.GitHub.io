(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{536:function(v,_,e){"use strict";e.r(_);var r=e(4),t=Object(r.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("p",[v._v("好，正式开始")]),v._v(" "),e("p",[v._v("我这次要讲的内容是: 在浏览器中，为什么第二次打开网页会变快？")]),v._v(" "),e("p",[v._v("依据这个题目信息，应该有些大佬已经知道我要讲的是什么内容了。")]),v._v(" "),e("p",[e("strong",[v._v("互动一：")])]),v._v(" "),e("p",[v._v("那么，有大佬可以说下：我下面要讲的是什么吗？")]),v._v(" "),e("p",[v._v("是的，我要讲的是浏览器缓存")]),v._v(" "),e("p",[e("strong",[v._v("显示PPT大纲")])]),v._v(" "),e("p",[e("strong",[v._v("个人介绍")])]),v._v(" "),e("p",[v._v("好，介绍完自己之后。我们正式开始这次的分享")]),v._v(" "),e("p",[v._v("既然讲的是浏览器缓存，那么我们就要先回顾一下之前大佬们的分享。之前，有晓风讲的浏览器架构演进、有小红讲的TCP协议上层应用、有清晨讲的服务端缓存、有滴哥讲的TCP协议原理介绍。再加上这次的浏览器缓存，所以这一系列的分享都是在讲一个经典面试题："),e("code",[v._v("在浏览器里，从输入 URL 到页面展示，这中间发生了什么？")])]),v._v(" "),e("p",[v._v("不知道各位大佬还记得多少之前的分享内容，我这边回顾一下之前的分享。从中分析哪些过程会让浏览器进行缓存。")]),v._v(" "),e("p",[e("strong",[v._v("输入 URL 到页面展示，这中间发生了什么 ，流程")])]),v._v(" "),e("p",[v._v("从整个流程上来看，在发起URL请求之前，会进行DNS查询。(皮一下：这个有同学不清楚吗？如果有不清楚的，课后找小红大佬。小红大佬在讲HTTP应用的时候有讲过这个哈。)")]),v._v(" "),e("p",[v._v("DNF查询之后，会构建TCP请求，经过一系列的三次握手等操作。然后服务端将数据发送给客户端，客户端读取响应头信息，然后读取响应体数据。")]),v._v(" "),e("p",[v._v("所以这个过程中，浏览器会进行DNS缓存和页面资源缓存。")]),v._v(" "),e("p",[e("strong",[v._v("那么DNS缓存的流程")])]),v._v(" "),e("blockquote",[e("p",[v._v('DNS: 域名和IP地址做一一映射关系。这套映射为IP的系统叫做“域名系统”，简称"DNS"')])]),v._v(" "),e("p",[v._v("浏览器请求DNS 返回域名对应的IP。这时候浏览器会将DNS数据缓存 下来，以供下次查询使用。这样就会减少一次网络请求。")]),v._v(" "),e("p",[v._v("好，下面才是我们的正文：浏览器资源缓存。上面都是水文。")]),v._v(" "),e("p",[v._v("正文主要讲的内容：")]),v._v(" "),e("ul",[e("li",[v._v("缓存过程")]),v._v(" "),e("li",[v._v("缓存的数据是怎么存放的")]),v._v(" "),e("li",[v._v("缓存的有效性，浏览器是如何保证缓存资源是最新的")])]),v._v(" "),e("p",[v._v("正文第一弹：看图，大致了解下浏览器缓存过程。")]),v._v(" "),e("p",[v._v("那么，我们大致了解了浏览器缓存过程之后。来具体讲一下浏览器的缓存过程：")]),v._v(" "),e("ul",[e("li",[v._v("强缓存")]),v._v(" "),e("li",[v._v("协商缓存")])]),v._v(" "),e("p",[v._v("先解释一下强缓存：")]),v._v(" "),e("blockquote",[e("p",[v._v("强缓存是当我们访问URL的时候，不会向服务器发送请求，直接从缓存中读取资源，但是会返回200的状态码")])]),v._v(" "),e("p",[e("strong",[v._v("如何设置强缓存？")])]),v._v(" "),e("p",[v._v("我们第一次进入页面，请求服务器，然后服务器进行应答，浏览器会根据响应头(response Header)来判断是否对资源进行缓存，如果响应头中出现"),e("code",[v._v("expires")]),v._v("、"),e("code",[v._v("Pragma")]),v._v("、"),e("code",[v._v("cache-control")]),v._v("、"),e("code",[v._v("Last-Modified")]),v._v("、"),e("code",[v._v("If-Modified-Since")]),v._v("等字段，表示该资源需要被缓存。")]),v._v(" "),e("p",[v._v("第二次请求时，浏览器判断请求参数，如果符合强缓存条件就直接返回状态码200，从本地缓存中拿数据。否则就进行后续流程")]),v._v(" "),e("p",[v._v("强缓存介绍完成之后，那么来看下协商缓存")]),v._v(" "),e("p",[v._v("什么是协商缓存：")]),v._v(" "),e("blockquote",[e("p",[v._v("协商缓存就是强缓存失效后，浏览器携带缓存标识向服务器发送请求，服务器根据缓存标识来决定是否使用缓存。这一过程是协商缓存。")])]),v._v(" "),e("p",[v._v("协商缓存有两种情况")]),v._v(" "),e("ul",[e("li",[v._v("缓存生效：返回304（图）")]),v._v(" "),e("li",[v._v("协商缓存缓存失败，返回200和请求结果（图）")])]),v._v(" "),e("p",[e("strong",[v._v("如何设置协商缓存")])]),v._v(" "),e("p",[e("strong",[v._v("Last-Modified/if-Modified-since")])]),v._v(" "),e("p",[v._v("Last-Modified是服务器响应请求时，返回该资源文件在服务器最后被修改的时间。")]),v._v(" "),e("p",[v._v("If-Modified-Since则是客户端再次发起该请求时，携带上次请求返回的Last-Modified值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求，发现请求头含有If-Modified-Since字段，则会根据If-Modified-Since的字段值与该资源在服务器的最后被修改时间做对比，若服务器的资源最后被修改时间大于If-Modified-Since的字段值，则重新返回资源，状态码为200；否则则返回304，代表资源无更新，可继续使用缓存文件。")]),v._v(" "),e("p",[e("strong",[v._v("Etag/if-None-Match")])]),v._v(" "),e("p",[v._v("Etag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)。")]),v._v(" "),e("p",[v._v("If-None-Match是客户端再次发起该请求时，携带上次请求返回的唯一标识Etag值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有If-None-Match，则会根据If-None-Match的字段值与该资源在服务器的Etag值做对比，一致则返回304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为200。")]),v._v(" "),e("blockquote",[e("p",[v._v("Etag / If-None-Match优先级高于Last-Modified / If-Modified-Since，同时存在则只有Etag / If-None-Match生效。")])]),v._v(" "),e("h3",{attrs:{id:"缓存位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存位置"}},[v._v("#")]),v._v(" 缓存位置")]),v._v(" "),e("h4",{attrs:{id:"service-worker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[v._v("#")]),v._v(" Service Worker")]),v._v(" "),e("p",[v._v("是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用"),e("code",[v._v("Service Worker")]),v._v("的话，传输协议必须为"),e("code",[v._v("HTTPS")]),v._v("。因为"),e("code",[v._v("Service Worker")]),v._v("中涉及到请求拦截，所以必须使用"),e("code",[v._v("HTTPS")]),v._v("协议来保障安全。"),e("code",[v._v("Service Worker")]),v._v("的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如果匹配缓存、如何读取缓存，并且缓存是持续性的。")]),v._v(" "),e("h4",{attrs:{id:"memory-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#memory-cache"}},[v._v("#")]),v._v(" Memory Cache")]),v._v(" "),e("p",[v._v("内存中的缓存，主要包含的是当前页面中已经抓取到的资源，例如页面上已经下载的样式、脚本、图片等。读取内存中的数据肯定比磁盘快，内存缓存虽然读取高效，但是缓存持续性很短，会随着进程的释放而释放。一旦我们关闭"),e("code",[v._v("Tab")]),v._v("页面，内存中的缓存也就被释放了。")]),v._v(" "),e("h4",{attrs:{id:"disk-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#disk-cache"}},[v._v("#")]),v._v(" Disk Cache")]),v._v(" "),e("p",[v._v("存储在硬盘中的缓存，读取速度会慢一些，但是什么都能存储到磁盘中。相较于"),e("code",[v._v("Memory Cache")]),v._v("，"),e("code",[v._v("Disk Cache")]),v._v("胜在容量和存储时效性上。")]),v._v(" "),e("p",[v._v("在浏览器中，"),e("code",[v._v("Disk Cache")]),v._v("覆盖面基本是最大的。它会根据"),e("code",[v._v("HTTP Header")]),v._v(" 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。")]),v._v(" "),e("h4",{attrs:{id:"push-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#push-cache"}},[v._v("#")]),v._v(" Push Cache")]),v._v(" "),e("p",[e("code",[v._v("Push Cache")]),v._v("(推送缓存)是HTTP/2中的内容，当以上三种缓存都没有命中是，它才会被使用。它只在会话(Seesion)中存在，一旦单会话结束就被释放，并且缓存时间也很短暂，在"),e("code",[v._v("Chrome")]),v._v("浏览器中有5分钟左右，同时它也并非严格执行"),e("code",[v._v("HTTP")]),v._v("头中的缓存指令。")]),v._v(" "),e("h3",{attrs:{id:"待修改的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#待修改的问题"}},[v._v("#")]),v._v(" 待修改的问题")]),v._v(" "),e("ul",[e("li",[v._v("[ ] 语速太快")]),v._v(" "),e("li",[v._v("[x] Max-age没有说明含义")]),v._v(" "),e("li",[v._v("[x] 协商缓存流程还需要优化")]),v._v(" "),e("li",[v._v("[x] URL流程 + 文字描述\n"),e("ul",[e("li",[v._v("[x] DNS缓存")]),v._v(" "),e("li",[v._v("[x] 页面资源缓存")])])]),v._v(" "),e("li",[v._v("[x] 什么时候走内存缓存，什么时候走磁盘缓存")]),v._v(" "),e("li",[v._v("[x] Prefetch cache 缓存位置")]),v._v(" "),e("li",[v._v("[x] URL到页面展示的流程(图片)")]),v._v(" "),e("li",[v._v("[x] Vary响应")])]),v._v(" "),e("h3",{attrs:{id:"资料文献"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#资料文献"}},[v._v("#")]),v._v(" 资料文献")]),v._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching",target:"_blank",rel:"noopener noreferrer"}},[v._v("http cache"),e("OutboundLink")],1)]),v._v(" "),e("p",[e("a",{attrs:{href:"https://www.infoq.cn/article/8vu-vcrhoxducafprnol",target:"_blank",rel:"noopener noreferrer"}},[v._v("深入理解缓存机制"),e("OutboundLink")],1)]),v._v(" "),e("p",[e("a",{attrs:{href:"https://time.geekbang.org/column/intro/216",target:"_blank",rel:"noopener noreferrer"}},[v._v("浏览器工作原理与实践"),e("OutboundLink")],1)]),v._v(" "),e("blockquote",[e("p",[v._v("FBI Warning：以下文字，只是我结合相关文档和文章, 总结出来的一些浅薄的经验， 如有错误，欢迎指正 😃")])])])}),[],!1,null,null,null);_.default=t.exports}}]);