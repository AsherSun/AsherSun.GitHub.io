(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{541:function(t,s,a){"use strict";a.r(s);var n=a(4),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"开篇词-从今天起-跨过-数据结构与算法-这个坎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开篇词-从今天起-跨过-数据结构与算法-这个坎"}},[t._v("#")]),t._v(" 开篇词 | 从今天起，跨过“数据结构与算法”这个坎")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("那些所谓的新技术，核心和本质的东西其实就是当初学的那些知识。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("基础知识就像是一座大楼的地基，它决定了我们的技术高度。而想要快速做出点事情，前提条件一定是基础能力过硬，“内功”要到位。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("人生路上，我们会遇到很多的坎。跨过去，你就可以成长，跨不过去就是困难和停滞。而在后面很长的一段时间里，你都需要为这个困难买单。对于我们技术人来说，更是这样。"),a("strong",[t._v("既然数据结构和算法这个坎，我们总归是要跨过去的，为什么不是现在呢？")])])]),a("h2",{attrs:{id:"_01-为什么要学习数据结构和算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_01-为什么要学习数据结构和算法"}},[t._v("#")]),t._v(" 01 | 为什么要学习数据结构和算法？")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("作为业务开发，我们会用到各种框架、中间件和底层系统，比如Spring、RPC框架、消息中间件、Redis等等。在这些基础框架中，一般都柔和了很多基础数据结构和算法的设计思想。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("掌握数据结构和算法，不管对于阅读框架源码，还是理解其背后的设计思想，都是非常有用的。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("掌握了数据结构与算法，你看待问题的深度，解决问题的角度就会完全不一样。")])]),a("h2",{attrs:{id:"_02-如何抓住重点-系统高效地学习数据结构与算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_02-如何抓住重点-系统高效地学习数据结构与算法"}},[t._v("#")]),t._v(" 02 | 如何抓住重点，系统高效地学习数据结构与算法？")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("从广义上讲，"),a("strong",[t._v("数据结构就是指一组数据的存储结构。算法就是操作数据的一组方法。")])])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("数据结构是为算法服务的，算法要作用在特定的数据结构之上。因此，我们无法孤立数据结构来讲算法，也无法孤立算法来讲数据结构。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("数据结构是静态的，它只是组织数据的一种方式。如果不在它的基础上操作、构建算法，孤立存在的数据结构就是没用的。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("数据结构与算法的知识点：")]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("查看图片")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/913e0ababe43a2d57267df5c5f0832a7.webp",alt:"数据结构与算法知识点"}})])])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("10个数据结构：\n数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie数；"),a("br"),t._v("\n10个算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。")])]),a("h2",{attrs:{id:"_03-复杂度分析-上-如何分析统计算法的执行效率和资源消耗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_03-复杂度分析-上-如何分析统计算法的执行效率和资源消耗"}},[t._v("#")]),t._v(" 03 ｜ 复杂度分析（上）：如何分析统计算法的执行效率和资源消耗？")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行的更快，如何让代码更省存储空间。所以，执行效率是算法一个非常重要的考量指标。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("strong",[t._v("复杂度分析是整个算法学习的精髓，只要掌握了它，数据结构和算法的内容基本上就掌握了一半。")])])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("strong",[t._v("事后统计法的局限性：")])]),t._v(" "),a("ul",[a("li",[t._v("测试结果非常依赖测试环境")]),t._v(" "),a("li",[t._v("测试结果受数据规模的影响很大")])])]),a("h3",{attrs:{id:"大o复杂度表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大o复杂度表示法"}},[t._v("#")]),t._v(" 大O复杂度表示法")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("估算下这段代码的执行时间：")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// return sum")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("blockquote",[a("p",[t._v("我们可以假设每段代码的执行时间都是一样的，为"),a("code",[t._v("unit_time")]),t._v("。在这个假设的基础之上，这段代码的总执行时间是多少？")])]),t._v(" "),a("ul",[a("li",[t._v("第2、3行分别需要1个"),a("code",[t._v("unit_time")]),t._v("时间，公式为："),a("code",[t._v("2 * unit_time")]),t._v("。")]),t._v(" "),a("li",[t._v("第4、5行都运行了n遍，所以第四行是"),a("code",[t._v("n * unit_time")]),t._v("，第五行也是"),a("code",[t._v("n * unit_time")]),t._v("。简化下公式为："),a("code",[t._v("（n + n) * unit_time")]),t._v("，再简化下公式为："),a("code",[t._v("2n * unit_time")]),t._v("。")]),t._v(" "),a("li",[t._v("所有代码的执行时间T(n)与每行代码的执行次数成正比")]),t._v(" "),a("li",[t._v("最后总的执行时间T(n)为："),a("code",[t._v("2n * unit_time + 2 * unit_time")]),t._v("，简化下公式为："),a("code",[t._v("(2n + 2) * unit_time = T(n)")])])]),t._v(" "),a("p",[t._v("再来看下这段代码的执行时间：")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" j\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sum = sum + i * j")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("我们依旧假设每个语句的执行时间是"),a("code",[t._v("unit_time")]),t._v("。那么这段代码的总执行时间"),a("code",[t._v("T(n)")]),t._v("是？")]),t._v(" "),a("ul",[a("li",[t._v("第2、3、4行分别需要1个"),a("code",[t._v("unit_time")]),t._v("时间。公式为："),a("code",[t._v("3 * unti_time")])]),t._v(" "),a("li",[t._v("第5、6行分别需要n个"),a("code",[t._v("unit_time")]),t._v("时间。公式为："),a("code",[t._v("2n * unit_time")])]),t._v(" "),a("li",[t._v("第7、8行分别需要n个"),a("code",[t._v("unit_time")]),t._v("时间，但是需要执行n遍。公式为："),a("code",[t._v("(2n * unit_time) * n")])]),t._v(" "),a("li",[t._v("最后的执行是间："),a("code",[t._v("T(n) = 3 * unit_time + 2n * unit_time + 2n * unit_time * n")])]),t._v(" "),a("li",[t._v("公式简化为："),a("code",[t._v("(2n + 3) * unit_time + (2n * n) * unit_time")])]),t._v(" "),a("li",[t._v("公式再简化为："),a("code",[t._v("(2n + 3 + 2n²) * unit_time")])])]),t._v(" "),a("blockquote",[a("p",[t._v("尽管我们不知道"),a("code",[t._v("unit_time")]),t._v("的具体值，但是通过这两段代码执行时间的推导过程，我们可以得到一个非常重要的规律，那就是，"),a("strong",[t._v("所有代码的执行时间T(n)与每行代码的执行次数成正比。")])])]),t._v(" "),a("p",[a("strong",[t._v("我么可以把这个规律总结为一个公式：T(n) = O(f(n))")]),t._v("\n这段公式的大概意思为：")]),t._v(" "),a("ul",[a("li",[t._v("T(n)表示一段代码执行的总时间")]),t._v(" "),a("li",[t._v("n表示数据规模的大小")]),t._v(" "),a("li",[t._v("f(n)每行代码执行的次数总和，因为这是一个公式，所以用f(n)来表示。")]),t._v(" "),a("li",[t._v("O表示代码的执行时间T(n)与f(n)表达式成正比。")])]),t._v(" "),a("p",[t._v("所以第一个例子中的"),a("code",[t._v("Tn = O(2n + 2)")]),t._v("。第二个例子中的T(n) = O(2n + 3 + 2n²)。")]),t._v(" "),a("p",[t._v("以上就是大O时间复杂度表示法。")]),t._v(" "),a("blockquote",[a("p",[t._v("大O时间复杂度实际上并不具体表示代码真正的执行时间，而是表示"),a("strong",[t._v("代码执行时间随着数据规模增长的变化趋势")]),t._v("，所以，也叫作"),a("strong",[t._v("渐进时间复杂度")]),t._v("（asymptotic time complexity），简称"),a("strong",[t._v("时间复杂度")]),t._v("。")])]),t._v(" "),a("p",[t._v("当 n 很大时，你可以把它想象成 10000、100000。"),a("strong",[t._v("而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略")]),t._v("。我们只需要记录一个最大量级就可以了，如果用大 O 表示法表示刚讲的那两段代码的时间复杂度，就可以记为："),a("strong",[t._v("T(n) = O(n)； T(n) = O(n2)")]),t._v("。")])]),a("h3",{attrs:{id:"时间复杂度分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度分析"}},[t._v("#")]),t._v(" 时间复杂度分析")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("strong",[t._v("只关注循环次数最多的一段代码")]),t._v(" "),a("br"),t._v("\n以下代码为例：")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("ul",[a("li",[t._v("第2、3行代码都是常量级的执行时间，与n的大小无关，所以对于复杂度并没有影响。")]),t._v(" "),a("li",[t._v("循环次数最多的是4、5行代码，这两行代码被执行了n次，所以总的时间复杂度就是O(n)")])])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("strong",[t._v("加法法则：总复杂度等于量级最大的那段代码的复杂度。")]),a("br"),t._v("\n这段代码，试着分析一下时间复杂度")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" q "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" q "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    sum_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum_3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      sum_3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum_3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("  i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" sum_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" sum_3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br")])]),a("p",[t._v("这段代码分为3部分，分别是sum_1、sum_2、sum_3。我们分析每一部分的时间复杂度，然后把它们放到一块，再取一个量级最大的作为整段代码的复杂度。")]),t._v(" "),a("blockquote",[a("p",[t._v("常量的执行时间虽然会对代码的执行时间有很大的影响，但是回到时间复杂度的概念来说，它表示的是一个算法执行效率与数据规模增长的变化趋势，所以不管常量的执行时间多大，我们都可忽略掉。因为它本身对趋势的增长并没有影响。")])]),t._v(" "),a("ul",[a("li",[t._v("第一段代码是循环了100次，跟n无关，它是一个常量。最终表示为"),a("code",[t._v("200 * unit_time")])]),t._v(" "),a("li",[t._v("第二段代码是循环了n次，它是一个变量。所以表示为："),a("code",[t._v("2n * unit_time")]),t._v("，用大O表示法则为"),a("code",[t._v("O(n)")])]),t._v(" "),a("li",[t._v("第三段代码是外层循环了n次，内层循环了n次的n遍。最终表示为："),a("code",[t._v("2n² * unit_time")]),t._v("，用大O表示法则为"),a("code",[t._v("O(n)")])]),t._v(" "),a("li",[t._v("综合这三段代码的时间复杂度，我们取其中最大的量级。所以整段代码的时间复杂度为："),a("code",[t._v("O(n²)")])])]),t._v(" "),a("p",[t._v("也就是说，"),a("strong",[t._v("总的时间复杂度等于量级最大的那段代码的时间复杂度")]),t._v("。那么将这个规律抽象成公式就是："),a("br")]),t._v(" "),a("p",[t._v("如果"),a("code",[t._v("T1(n) = O(f1(n))，T2(n) = O(f2(n))")]),t._v(";那么"),a("code",[t._v("T(n) = T1(n) + T2(n) = max(O(f1(n)), O(f2(n))) = O(max(f1(n), f2(n)))")]),t._v(";")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("strong",[t._v("乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积")]),a("br"),t._v("\n乘法法则公式："),a("br")]),t._v(" "),a("ul",[a("li",[t._v("如果"),a("code",[t._v("T1(n) = O(f(n)), T2(n) = O(g(n))")]),t._v("；")]),t._v(" "),a("li",[t._v("那么"),a("code",[t._v("T(n) = T1(n) * T2(n) = O(f(n)) * O(g(n)) = O(f(n) * g(n))")])])]),t._v(" "),a("p",[t._v("假设：T1(n) = O(n)，T2(n) = O(n²)，那么 T1(n) * T2(n) = O(n²)。落实到具体代码上，可以把乘法法则看成是"),a("strong",[t._v("嵌套循环")]),t._v("。如下列子：")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("ul",[a("li",[t._v("假设f只是一个普通的操作，那么第4 ~ 6行的时间复杂度就是T1(n) = O(n)。")]),t._v(" "),a("li",[t._v("但f不是一个普通操作，f函数里面有一个for循环，所以它的时间复杂度是T2(n) = O(n)")]),t._v(" "),a("li",[t._v("那么整个cal函数的时间复杂度就是T1(n) * T2(n) = O(n*n) = O(n²)。")])])]),a("h3",{attrs:{id:"几种常见时间复杂度实例分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#几种常见时间复杂度实例分析"}},[t._v("#")]),t._v(" 几种常见时间复杂度实例分析")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/3723793cc5c810e9d5b06bc95325bf0a.webp",alt:"数据结构与算法知识点"}}),t._v("\n复杂度量级可以粗略地分为两类")]),t._v(" "),a("ul",[a("li",[t._v("多项式量级")]),t._v(" "),a("li",[t._v("非多项式量级")]),t._v(" "),a("li",[t._v("非多多项式量级只有两个：O(2n) 和 O(n!)。")])]),t._v(" "),a("p",[t._v("我们把时间复杂度为非多项式量级的算法问题叫作 NP（Non-Deterministic Polynomial，非确定多项式）问题。"),a("br"),t._v("\n当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("strong",[t._v("1. O(1)")]),a("br"),t._v("\nO(1)只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。例如一下代码的时间复杂度就是O(1)。")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("blockquote",[a("p",[t._v("只要代码的执行时间不随着n的增大而增长，这样代码的时间复杂度我们都记作O(1)。或者说："),a("strong",[t._v("一般情况下，只要算法中不存在循环语句、递归语句、即使有成千上万行代码，其时间复杂度也是O(1)。")])])])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("strong",[t._v("O(logn)、O(nlog)n")]),a("br"),t._v("\n如下代码：")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("ul",[a("li",[t._v("从代码中可以看出，变量i的值是从1开始，每循环一次乘以2")]),t._v(" "),a("li",[t._v("当大于n时循环结束")]),t._v(" "),a("li",[t._v("实际上，变量i的取值就是一个等比数列，大致可以表示为2^x = n")]),t._v(" "),a("li",[t._v("通过2^x = n求解x，那么可以表示为 x=log2n")]),t._v(" "),a("li",[t._v("所以这段代码的时间复杂度就是O(log2n)")])]),t._v(" "),a("p",[t._v("实际上，不管是以2为底，以3为底，还是以10为底我们都可以把所有对数阶的时间复杂度都记为O(logn)。")]),t._v(" "),a("p",[t._v("为什么呢？"),a("br"),t._v("\n我们知道，对数之间是可以互相转换的，log3n 就等于 log32 * log2n，所以 O(log3n) = O(C * log2n)，其中 C=log32 是一个常量。基于我们前面的一个理论："),a("strong",[t._v("在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))")]),t._v("。所以，O(log2n) 就等于 O(log3n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。"),a("br")]),t._v(" "),a("p",[t._v("如果你理解了我前面讲的 O(logn)，那 O(nlogn) 就很容易理解了。还记得我们刚讲的乘法法则吗？如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。而且，O(nlogn) 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 O(nlogn)。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("strong",[t._v("O(m+n)、O(m*n)")]),a("br"),t._v("\n代码复杂度由两个数据规模决定，如下代码：")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    sum_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" sum_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("p",[t._v("从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)。"),a("br"),t._v("\n针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) = O(f(m) * f(n))。")])]),a("h3",{attrs:{id:"空间复杂度分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度分析"}},[t._v("#")]),t._v(" 空间复杂度分析")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("时间复杂度的全称是"),a("strong",[t._v("渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系")]),t._v("。类比一下，空间复杂度全称就是"),a("strong",[t._v("渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。")])])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("以代码为例：")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("ul",[a("li",[t._v("从代码中看，第二行申请了一个存储变量i的空间。但它是常量阶的，跟数据规模n没有关系，可以忽略")]),t._v(" "),a("li",[t._v("第三行申请了一个大小为n的数组空间，除此之外，剩下的代码都没有占用更多的空间。")]),t._v(" "),a("li",[t._v("整段代码的空间复杂度就是O(n)")])]),t._v(" "),a("p",[t._v("我们常见的空间复杂度就是O(1)、O(n)、O(n²)，像O(logn)、O(nlogn)这样的对数阶复杂度平时都用不到。")])]),a("h2",{attrs:{id:"_04-复杂度分析-下-浅析最好、最坏、平均、均摊时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_04-复杂度分析-下-浅析最好、最坏、平均、均摊时间复杂度"}},[t._v("#")]),t._v(" 04 | 复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("4个复杂度分析概念：")]),t._v(" "),a("ul",[a("li",[t._v("最好情况时间复杂度（best case time complexity）")]),t._v(" "),a("li",[t._v("最坏情况时间复杂度（worst case time complexity）")]),t._v(" "),a("li",[t._v("平均情况时间复杂度（average case time complexity）")]),t._v(" "),a("li",[t._v("均摊时间复杂度（amortized time complexity）")])])]),a("h3",{attrs:{id:"最好、最坏情况时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最好、最坏情况时间复杂度"}},[t._v("#")]),t._v(" 最好、最坏情况时间复杂度")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("试着分析下这段代码的复杂度")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// n表示数组array的长度")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("ul",[a("li",[t._v("这段代码的负载读是O(n)，其中，n代表数组长度。"),a("br")])]),t._v(" "),a("p",[t._v("我们来优化下这段代码")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// n表示数组array的长度")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("那么优化完之后的代码时间复杂度还是O(n)吗？用O(n)无法解决。"),a("br")]),t._v(" "),a("ul",[a("li",[t._v("因为变量x可能出现在数组的任意位置。")]),t._v(" "),a("li",[t._v("如果数组中的第一个元素正好是x变量，时间复杂度就是O(1)。")]),t._v(" "),a("li",[t._v("如果数组中不存在x变量，那么就需要将数组遍历一遍，时间复杂度就是O(n)")]),t._v(" "),a("li",[t._v("所以，在不同的情况下，这段代码的时间复杂度是不一样的。")])]),t._v(" "),a("p",[t._v("为了代码表示在不同情况下的不同时间复杂度，这里引入三个概念："),a("br")]),t._v(" "),a("p",[a("strong",[t._v("最好时间复杂度")]),t._v("：在最理想的情况下，执行这段代码的时间复杂度。"),a("br")]),t._v(" "),a("p",[a("strong",[t._v("最坏时间复杂度")]),t._v("：在最糟糕的情况下，执行这段代码的时间复杂度。"),a("br")]),t._v(" "),a("p",[a("strong",[t._v("平均情况时间复杂度")])])]),a("h3",{attrs:{id:"平均情况时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#平均情况时间复杂度"}},[t._v("#")]),t._v(" 平均情况时间复杂度")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("我们都知道，最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码复杂度，发生的概率其实并不大。为了更好地表示平均情况下的复杂度，我们需要引入另一个概念：平均情况时间复杂度，后面我简称为平均时间复杂度。"),a("br")]),t._v(" "),a("p",[t._v("平均时间复杂度又该怎么分析呢？我还是借助刚才查找变量 x 的例子来给你解释。"),a("br")]),t._v(" "),a("p",[t._v("要查找的变量 x 在数组中的位置，有 n+1 种情况：在数组的 0～n-1 位置中和不在数组中。我们把每种情况下，查找需要遍历的元素个数累加起来，然后再除以 n+1，就可以得到需要遍历的元素个数的平均值，即："),a("br")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/d889a358b8eccc5bbb90fc16e327a22f.webp",alt:"图片"}})]),t._v(" "),a("p",[t._v("我们知道，时间复杂度的大 O 标记法中，可以省略掉系数、低阶、常量，所以，咱们把刚刚这个公式简化之后，得到的平均时间复杂度就是 O(n)。"),a("br")]),t._v(" "),a("p",[t._v("这个结论虽然是正确的，但是计算过程稍微有点儿问题。究竟是什么问题呢？我们刚讲的这 n+1 种情况，出现的概率并不是一样的。我带你具体分析一下。（这里要稍微用到一点儿概率论的知识，不过非常简单，你不用担心。）"),a("br")]),t._v(" "),a("p",[t._v("我们知道，要查找的变量 x，要么在数组里，要么就不在数组里。这两种情况对应的概率统计起来很麻烦，为了方便你理解，我们假设在数组中与不在数组中的概率都为 1/2。另外，要查找的数据出现在 0～n-1 这 n 个位置的概率也是一样的，为 1/n。所以，根据概率乘法法则，要查找的数据出现在 0～n-1 中任意位置的概率就是 1/(2n)。"),a("br")]),t._v(" "),a("p",[t._v("因此，前面的推导过程中存在的最大问题就是，没有将各种情况发生的概率考虑进去。如果我们把每种情况发生的概率也考虑进去，那平均时间复杂度的计算过程就变成了这样："),a("br"),t._v(" "),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/36c0aabdac69032f8a43368f5e90c67f.webp",alt:"图片"}}),t._v("\n这个值就是概率论中的加权平均值，也叫作期望值，所以平均时间复杂度的全称应该叫加权平均时间复杂度或者期望时间复杂度。"),a("br")]),t._v(" "),a("p",[t._v("引入概率之后，前面那段代码的加权平均值为 (3n+1)/4。用大 O 表示法来表示，去掉系数和常量，这段代码的加权平均时间复杂度仍然是 O(n)。"),a("br")]),t._v(" "),a("p",[t._v("你可能会说，平均时间复杂度分析好复杂啊，还要涉及概率论的知识。实际上，在大多数情况下，我们并不需要区分最好、最坏、平均情况时间复杂度三种情况。像我们上一节课举的那些例子那样，很多时候，我们使用一个复杂度就可以满足需求了。只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。"),a("br")])]),a("h3",{attrs:{id:"均摊时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#均摊时间复杂度"}},[t._v("#")]),t._v(" 均摊时间复杂度")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("每一次O(n)的插入操作，都会跟着n-1次O(1)的插入操作，所以把耗时多的那次操作均摊到接下来 n - 1次耗时的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是O(1)。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("均摊时间复杂度就是一种特殊的平均时间复杂度。")])]),a("h2",{attrs:{id:"_05-数组-为什么很多编程语言中数组都是从0开始编号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_05-数组-为什么很多编程语言中数组都是从0开始编号"}},[t._v("#")]),t._v(" 05 | 数组：为什么很多编程语言中数组都是从0开始编号？")]),t._v(" "),a("h3",{attrs:{id:"如何实现随机访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现随机访问"}},[t._v("#")]),t._v(" 如何实现随机访问")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("数组的定义："),a("br")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。")])])])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("线性表（Linear List）："),a("br"),t._v("\n线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。除了数组，链表、队列、栈等也是线性表结构。")]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("查看图片")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/b6b71ec46935130dff5c4b62cf273477.webp",alt:"线性表"}})])])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("非线性表："),a("br"),t._v("\n在非线性表中，数据之间并不是简单的前后关系。比如，二叉树、堆、图等。")]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("查看图片")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/6ebf42641b5f98f912d36f6bf86f6569.webp",alt:"非线性表"}})])])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("数组的线性表特性加上连续的内存空间和相同类型的数据确保了数组的“随机访问特性”。弊端是让数组的另一些操作变得非常低效，比如数组中的删除、插入一个数据，为保证连续性，就需要做大量的数据搬移工作。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("计算机随机访问数组中的某个元素时，会通过下面的寻址公式，计算出该元素存储的内存地址：")]),t._v(" "),a("div",{staticClass:"language-base line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("a[i]_adddress = base_address + i + data_type_size\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("其中data_type_size表示数组中每个元素的大小")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("数组适合查找，但时间复杂度并不为O(1)。即便是排序号的数组，使用二分查找，时间复杂度也是O(logn)。数组支持随机访问，根据下标随机访问的时间复杂度为O(1)。")])]),a("h3",{attrs:{id:"低效的-插入-和-删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#低效的-插入-和-删除"}},[t._v("#")]),t._v(" 低效的“插入”和“删除”")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("strong",[t._v("插入操作")]),a("br")]),t._v(" "),a("ul",[a("li",[t._v("如果只插入到数组末尾，那么时间复杂度是O(1)")]),t._v(" "),a("li",[t._v("如果插入到数组开头，那么时间复杂度是O(n)")]),t._v(" "),a("li",[t._v("在每个位置上插入的概率是一样的，那么平均情况时间复杂度为(1 + 2 + ...n) / n = O(n)")]),t._v(" "),a("li",[t._v("如果数组中的数据是无序的，只是一个存储数据的集合。在这种情况下，为了避免大规模的迁移数据，通常会在插入的位置把改位置的元素移动到最后一位，然后再插入。这时候时间复杂度为O(1)。")])])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("strong",[t._v("删除操作")]),a("br")]),t._v(" "),a("ul",[a("li",[t._v("如果只删除数组末尾的数据，那么时间复杂度是O(1)")]),t._v(" "),a("li",[t._v("如果删除数组开头的疏忽，那么时间复杂度为O(n)，平均情况时间复杂度也为O(n)")])]),t._v(" "),a("p",[t._v("如果在不追求数组中数据连续性的情况下，可以将多次的删除操作标记出来，等到数组没有更多的存储空间时，再触发一次真正的删除操作，这时就大大减少了删除操作导致的数据搬移。\n例如，数组中存储了8个元素：a、b、c、d、e、f、g、h。现在依次删除a、b、c三个元素。\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/b69b8c5dbf6248649ddab7d3e7cfd7e5.webp",alt:"非线性表"}}),t._v("\n为避免多次搬移数据，先记录已删除的数据。当数组没有更多存储空间时，再触发一次真正的删除操作。")])]),a("h3",{attrs:{id:"警惕数组的访问越界问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#警惕数组的访问越界问题"}},[t._v("#")]),t._v(" 警惕数组的访问越界问题")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("先看一段C语言代码：")]),t._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("这段代码会无限循环打印Hello world。"),a("br")]),t._v(" "),a("p",[t._v("因为数组大小为3，"),a("code",[t._v("a[0]、a[1]、a[2]")]),t._v("。for循环的结束条件写成了"),a("code",[t._v("i<= 3")]),t._v("，所以，当"),a("code",[t._v("i = 3")]),t._v(" 时，数组"),a("code",[t._v("a[3]")]),t._v("访问越界。正确的方式是for循环结束条件写成 "),a("code",[t._v("i < 3")]),t._v("。"),a("br")]),t._v(" "),a("p",[t._v("在C语言中，只要不是访问受限的内存，所有的内存空间都可以自由访问。根据前面讲的数组寻址公式，"),a("code",[t._v("a[3]")]),t._v("会被定位到某块不属于数组的内存地址上，而这个地址正好是存储变量i的内存地址。那么"),a("code",[t._v("a[3] = 0")]),t._v("，其实就是变量"),a("code",[t._v("i = 0")]),t._v("，所以会导致代码无限循环。"),a("br")]),t._v(" "),a("p",[t._v("并非所有的编程语言都像C这样，像JavaScript本身并不存在数组访问越界的问题，因为JavaScript中的数组通常而言是不会定义它的大小，而是动态扩容的。"),a("br")])]),a("h3",{attrs:{id:"二维数组内存寻址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二维数组内存寻址"}},[t._v("#")]),t._v(" 二维数组内存寻址")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("对于 "),a("code",[t._v("m * n")]),t._v(" 的数组，"),a("code",[t._v("a [ i ][ j ] (i < m,j < n)")]),t._v("的地址为：")]),t._v(" "),a("p",[a("code",[t._v("address = base_address + ( i * n + j) * type_size")])])]),a("h2",{attrs:{id:"_06-链表-上-如何实现lru缓存淘汰算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_06-链表-上-如何实现lru缓存淘汰算法"}},[t._v("#")]),t._v(" 06 | 链表（上）：如何实现LRU缓存淘汰算法？")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("常见的三种缓存策略：")]),t._v(" "),a("ul",[a("li",[t._v("先进先出策略FIFO（Fist In，Fist Out）")]),t._v(" "),a("li",[t._v("最少使用策略LFU（Least Frequently Used）")]),t._v(" "),a("li",[t._v("最近最少使用策略（Least Recently Used）")])])]),a("h3",{attrs:{id:"五花八门的链表结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五花八门的链表结构"}},[t._v("#")]),t._v(" 五花八门的链表结构")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("strong",[t._v("底层的存储结构")]),a("br"),t._v("\n数组需要一块"),a("strong",[t._v("连续的内存空间")]),t._v("来存储，对内存的要求比较高。如果申请一个100MB大小的数组，当内存中没有连续的、足够大的存储空间时，即便内存的剩余总可以用空间大于100MB，仍然会申请失败。")]),t._v(" "),a("p",[t._v("链表并不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用。所以，如果我们申请的是100MB大小的链表，根本不会有问题。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/d5d5bee4be28326ba3c28373808a62cd.webp",alt:"数组和链表的存储结构"}})])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("常见的三种链表结构"),a("br")]),t._v(" "),a("ul",[a("li",[t._v("单链表")]),t._v(" "),a("li",[t._v("双链表")]),t._v(" "),a("li",[t._v("循环链表")])])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("链表通过指针将一组零散的内存块串联在一起。其中，我们把内存块成为链表的"),a("strong",[t._v("结点")]),t._v("。为了将所有节点串联起来，每个链表的结点除了存储数据之外，还需要记录链上的下一个结点的地址。我们把这个记录下个结点的指针叫做"),a("strong",[t._v("后继指针")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/b93e7ade9bb927baad1348d9a806ddeb.webp",alt:"单链表"}})]),t._v(" "),a("p",[t._v("我们习惯把第一个结点叫做头结点，把最后一个结点叫做尾结点。头结点用来记录链表的基地址。有了它，我们就可以遍历整条链表。而尾结点指向一个"),a("strong",[t._v("空地址NULL")]),t._v("，表示这是链表上的最后一个结点。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("针对链表的插入和删除操作，我们只需要考虑相邻结点的指针改变，所以对应的时间复杂度是O(1)。\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/452e943788bdeea462d364389bd08a17.webp",alt:"链表的插入或删除"}})]),t._v(" "),a("p",[t._v("如果想要随机访问第K个元素，就没有数组那么高效了。因为链表中的数据并非连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就能直接计算出对应的内存地址，而是需要根据指针一个结点一个结点地依次遍历，直到找到相应的结点。")]),t._v(" "),a("p",[t._v("你可以把链表想象成一个队伍，队伍中的每个人都只知道自己后面的人是谁，所以当我们希望知道排在第 k 位的人是谁的时候，我们就需要从第一个人开始，一个一个地往下数。所以，链表随机访问的性能没有数组好，需要 O(n) 的时间复杂度。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("strong",[t._v("循环链表是一种特殊的单链表")]),t._v("。它跟单链表唯一的区别就在尾结点。循环链表的尾结点指针是指向链表的头结点。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/86cb7dc331ea958b0a108b911f38d155.webp",alt:"循环链表"}})]),t._v(" "),a("p",[t._v("循环链表的优点是从链尾到链头比较方便。当要处理的数据具有环型结构特点时，就特别适合采用循环链表。比如著名的"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98",target:"_blank",rel:"noopener noreferrer"}},[t._v("约瑟夫问题"),a("OutboundLink")],1),t._v("。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("strong",[t._v("双向链表")]),a("br"),t._v("\n单向链表只有一个方向，结点只有一个后继指针 next 指向后面的结点。而双向链表，顾名思义，它支持两个方向，每个结点不止有一个后继指针 next 指向后面的结点，还有一个前驱指针 prev 指向前面的结点。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/cbc8ab20276e2f9312030c313a9ef70b.webp",alt:"循环链表"}})]),t._v(" "),a("p",[t._v("双向链表需要额外的两个空间来存储后继结点和前驱结点的地址。所以，如果存储同样多的数据，双向链表要比单链表占用更多的内存空间。虽然两个指针比较浪费存储空间，但可以支持双向遍历，这样也带来了双向链表操作的灵活性。")]),t._v(" "),a("p",[t._v("从结构上来看，双向链表可以支持 O(1) 时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的插入、删除等操作都要比单链表简单、高效。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("strong",[t._v("删除操作")]),a("br"),t._v("\n在实际的软件开发中，从链表中删除一个数据无外乎这两种情况：")]),t._v(" "),a("ul",[a("li",[t._v("删除结点中“值等于某个给定值”的结点；")]),t._v(" "),a("li",[t._v("删除给定指针指向的结点。")])]),t._v(" "),a("p",[t._v("尽管单纯的删除操作时间复杂度是 O(1)，但遍历查找的时间是主要的耗时点，对应的时间复杂度为 O(n)。根据时间复杂度分析中的加法法则，删除值等于给定值的结点对应的链表操作的总时间复杂度为 O(n)。")]),t._v(" "),a("p",[t._v("我们已经找到了要删除的结点，但是删除某个结点 q 需要知道其前驱结点，而单链表并不支持直接获取前驱结点，所以，为了找到前驱结点，我们还是要从头结点开始遍历链表，直到 p->next=q，说明 p 是 q 的前驱结点。")]),t._v(" "),a("p",[t._v("所以，针对第二种情况，单链表删除操作需要 O(n) 的时间复杂度，而双向链表只需要在 O(1) 的时间复杂度内就搞定了！")]),t._v(" "),a("p",[t._v("对于一个有序链表，双向链表的按值查询的效率也要比单链表高一些。因为，我们可以记录上次查找的位置 p，每次查询时，根据要查找的值与 p 的大小关系，决定是往前还是往后查找，所以平均只需要查找一半的数据。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("strong",[t._v("空间换时间的设计思想")]),a("br")]),t._v(" "),a("p",[t._v("当内存空间充足的时候，如果我们更加追求代码的执行速度，我们就可以选择空间复杂度相对较高、但时间复杂度相对很低的算法或者数据结构。相反，如果内存比较紧缺，比如代码跑在手机或者单片机上，这个时候，就要反过来用时间换空间的设计思路。")]),t._v(" "),a("p",[t._v("对于执行较慢的程序，可以通过消耗更多的内存（空间换时间）来进行优化；而消耗过多内存的程序，可以通过消耗更多的时间（时间换空间）来降低内存的消耗。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("strong",[t._v("双向循环列表")]),t._v(" "),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/d1665043b283ecdf79b157cfc9e5ed91.webp",alt:"双向循环列表"}})])]),a("h3",{attrs:{id:"链表-vs-数组性能大比拼"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表-vs-数组性能大比拼"}},[t._v("#")]),t._v(" 链表 VS 数组性能大比拼")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("数组和链表是两种截然不同的内存组织方式。正是因为内存存储的区别，它们插入、删除、随机访问操作的时间复杂度正好相反。\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/4f63e92598ec2551069a0eef69db7168.webp",alt:"链表和数组的性能"}})])]),a("h3",{attrs:{id:"如何基于链表实现lru缓存淘汰算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何基于链表实现lru缓存淘汰算法"}},[t._v("#")]),t._v(" 如何基于链表实现LRU缓存淘汰算法？")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。")])]),t._v(" "),a("li",[a("p",[t._v("如果此数据没有在缓存链表中，又可以分为两种情况：")])])]),t._v(" "),a("ul",[a("li",[t._v("如果此时缓存未满，则将此结点直接插入到链表的头部；")]),t._v(" "),a("li",[t._v("如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。")])]),t._v(" "),a("p",[t._v("因为不管缓存有没有满，我们都需要遍历一遍链表，所以这种基于链表的实现思路，缓存访问的时间复杂度为 O(n)。")]),t._v(" "),a("p",[t._v("实际上，我们可以继续优化这个实现思路，比如引入散列表（Hash table）来记录每个数据的位置，将缓存访问的时间复杂度降到 O(1)。")])]),a("h2",{attrs:{id:"_07-链表-下-如何轻松写出正确的链表代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_07-链表-下-如何轻松写出正确的链表代码"}},[t._v("#")]),t._v(" 07 | 链表（下）：如何轻松写出正确的链表代码？")]),t._v(" "),a("h3",{attrs:{id:"技巧一-理解指针或引用的含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#技巧一-理解指针或引用的含义"}},[t._v("#")]),t._v(" 技巧一：理解指针或引用的含义")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("有些语言有“指针”的概念，比如C语言；有些语言没有指针，取而代之的是“引用”，比如Java、Python。不管是“指针”还是“引用”，实际上，它们的意思都是一样的，都是存储所指对象的内存地址。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px"},attrs:{t:"1665301607231",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"4678",width:"200",height:"200"}},[a("path",{attrs:{d:"M512 469.333333m-426.666667 0a426.666667 426.666667 0 1 0 853.333334 0 426.666667 426.666667 0 1 0-853.333334 0Z",fill:"#FFF59D","p-id":"4679"}}),a("path",{attrs:{d:"M789.333333 469.333333c0-164.266667-140.8-294.4-309.333333-275.2-128 14.933333-230.4 117.333333-243.2 245.333334-10.666667 98.133333 29.866667 185.6 98.133333 241.066666 29.866667 25.6 49.066667 61.866667 49.066667 102.4v6.4h256v-2.133333c0-38.4 17.066667-76.8 46.933333-102.4 61.866667-51.2 102.4-128 102.4-215.466667z",fill:"#FBC02D","p-id":"4680"}}),a("path",{attrs:{d:"M652.8 430.933333l-64-42.666666c-6.4-4.266667-17.066667-4.266667-23.466667 0L512 422.4l-51.2-34.133333c-6.4-4.266667-17.066667-4.266667-23.466667 0l-64 42.666666c-4.266667 4.266667-8.533333 8.533333-8.533333 14.933334s0 12.8 4.266667 17.066666l81.066666 100.266667V789.333333h42.666667V554.666667c0-4.266667-2.133333-8.533333-4.266667-12.8l-70.4-87.466667 32-21.333333 51.2 34.133333c6.4 4.266667 17.066667 4.266667 23.466667 0l51.2-34.133333 32 21.333333-70.4 87.466667c-2.133333 4.266667-4.266667 8.533333-4.266667 12.8v234.666666h42.666667V563.2l81.066667-100.266667c4.266667-4.266667 6.4-10.666667 4.266666-17.066666s-4.266667-12.8-8.533333-14.933334z",fill:"#FFF59D","p-id":"4681"}}),a("path",{attrs:{d:"M512 938.666667m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z",fill:"#5C6BC0","p-id":"4682"}}),a("path",{attrs:{d:"M554.666667 960h-85.333334c-46.933333 0-85.333333-38.4-85.333333-85.333333v-106.666667h256v106.666667c0 46.933333-38.4 85.333333-85.333333 85.333333z",fill:"#9FA8DA","p-id":"4683"}}),a("path",{attrs:{d:"M640 874.666667l-247.466667 34.133333c6.4 14.933333 19.2 29.866667 34.133334 38.4l200.533333-27.733333c8.533333-12.8 12.8-27.733333 12.8-44.8zM384 825.6v42.666667L640 832v-42.666667z",fill:"#5C6BC0","p-id":"4684"}})]),t._v(" "),a("style",[t._v("\n          blockquote {\n            background-color: var(--code-color);\n            border-color: #67cc86;\n            border-left-width: 0.5rem;\n            border-left-style: solid;\n          }\n        ")]),a("p",[t._v("指针的概念")]),t._v(" "),a("blockquote",[a("p",[t._v("将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量。")])])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px"},attrs:{t:"1665301607231",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"4678",width:"200",height:"200"}},[a("path",{attrs:{d:"M512 469.333333m-426.666667 0a426.666667 426.666667 0 1 0 853.333334 0 426.666667 426.666667 0 1 0-853.333334 0Z",fill:"#FFF59D","p-id":"4679"}}),a("path",{attrs:{d:"M789.333333 469.333333c0-164.266667-140.8-294.4-309.333333-275.2-128 14.933333-230.4 117.333333-243.2 245.333334-10.666667 98.133333 29.866667 185.6 98.133333 241.066666 29.866667 25.6 49.066667 61.866667 49.066667 102.4v6.4h256v-2.133333c0-38.4 17.066667-76.8 46.933333-102.4 61.866667-51.2 102.4-128 102.4-215.466667z",fill:"#FBC02D","p-id":"4680"}}),a("path",{attrs:{d:"M652.8 430.933333l-64-42.666666c-6.4-4.266667-17.066667-4.266667-23.466667 0L512 422.4l-51.2-34.133333c-6.4-4.266667-17.066667-4.266667-23.466667 0l-64 42.666666c-4.266667 4.266667-8.533333 8.533333-8.533333 14.933334s0 12.8 4.266667 17.066666l81.066666 100.266667V789.333333h42.666667V554.666667c0-4.266667-2.133333-8.533333-4.266667-12.8l-70.4-87.466667 32-21.333333 51.2 34.133333c6.4 4.266667 17.066667 4.266667 23.466667 0l51.2-34.133333 32 21.333333-70.4 87.466667c-2.133333 4.266667-4.266667 8.533333-4.266667 12.8v234.666666h42.666667V563.2l81.066667-100.266667c4.266667-4.266667 6.4-10.666667 4.266666-17.066666s-4.266667-12.8-8.533333-14.933334z",fill:"#FFF59D","p-id":"4681"}}),a("path",{attrs:{d:"M512 938.666667m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z",fill:"#5C6BC0","p-id":"4682"}}),a("path",{attrs:{d:"M554.666667 960h-85.333334c-46.933333 0-85.333333-38.4-85.333333-85.333333v-106.666667h256v106.666667c0 46.933333-38.4 85.333333-85.333333 85.333333z",fill:"#9FA8DA","p-id":"4683"}}),a("path",{attrs:{d:"M640 874.666667l-247.466667 34.133333c6.4 14.933333 19.2 29.866667 34.133334 38.4l200.533333-27.733333c8.533333-12.8 12.8-27.733333 12.8-44.8zM384 825.6v42.666667L640 832v-42.666667z",fill:"#5C6BC0","p-id":"4684"}})]),t._v(" "),a("style",[t._v("\n          blockquote {\n            background-color: var(--code-color);\n            border-color: #67cc86;\n            border-left-width: 0.5rem;\n            border-left-style: solid;\n          }\n        ")]),a("p",[t._v("理解链表")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("p->next=q")]),t._v("。这个代码是说，p节点中的next指针存储了q结点的内存地址。"),a("br"),t._v(" "),a("code",[t._v("p->next=p->next->next")]),t._v("。这行代码表示，p结点的next指针存储了p节点的下下一个结点的内存地址。")])])]),a("h3",{attrs:{id:"技巧二-警惕指针丢失和内存泄露"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#技巧二-警惕指针丢失和内存泄露"}},[t._v("#")]),t._v(" 技巧二：警惕指针丢失和内存泄露")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/05a4a3b57502968930d517c934347c6e.webp",alt:"单链表插入"}}),t._v("\n如图所示，我们希望在结点 a 和相邻的结点 b 之间插入结点 x，假设当前指针 p 指向结点 a。如果我们将代码实现变成下面这个样子，就会发生指针丢失和内存泄露。")]),t._v(" "),a("div",{staticClass:"language-base line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("p->next = x;  // 将p的next指针指向x结点；\nx->next = p->next;  // 将x的结点的next指针指向b结点；\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("p-next指针在完成第一步操作之后，已经不再指向结点b，而是指向结点x。第2行代码相当于将x赋值给x-next，自己指向自己。因此，整个链表也就段按成了两半，从结点b往后的所有结点都无法访问到了。")]),t._v(" "),a("p",[t._v("对于有些语言来说，比如 C 语言，内存管理是由程序员负责的，如果没有手动释放结点对应的内存空间，就会产生内存泄露。所以，我们插入结点时，一定要注意操作的顺序，要先将结点 x 的 next 指针指向结点 b，再把结点 a 的 next 指针指向结点 x，这样才不会丢失指针，导致内存泄漏。")]),t._v(" "),a("p",[t._v("同理，删除链表结点时，也一定要记得手动释放内存空间，否则，也会出现内存泄漏的问题。")])]),a("h3",{attrs:{id:"技巧三-利用哨兵简化实现难度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#技巧三-利用哨兵简化实现难度"}},[t._v("#")]),t._v(" 技巧三：利用哨兵简化实现难度")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("如果向一个空链表中插入第一个结点，需要这样处理")]),t._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new_node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("如果删除链表中最后一个结点，需要写成这样子")]),t._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("我们可以看出，针对链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点的情况进行特殊处理。这样代码实现起来就会很繁琐，不简洁，而且也容易因为考虑不全而出错。")]),t._v(" "),a("p",[t._v("如果我们引入哨兵结点，在任何时候，不管链表是不是空，head 指针都会一直指向这个哨兵结点。我们也把这种有哨兵结点的链表叫带头链表。相反，没有哨兵结点的链表就叫作不带头链表。\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/7d22d9428bdbba96bfe388fe1e3368c7.webp",alt:"单链表插入"}}),t._v("\n利用哨兵简化编程难度的技巧，在很多代码实现中都有用到，比如插入排序，归并排序，动态规划等。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px"},attrs:{t:"1665301607231",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"4678",width:"200",height:"200"}},[a("path",{attrs:{d:"M512 469.333333m-426.666667 0a426.666667 426.666667 0 1 0 853.333334 0 426.666667 426.666667 0 1 0-853.333334 0Z",fill:"#FFF59D","p-id":"4679"}}),a("path",{attrs:{d:"M789.333333 469.333333c0-164.266667-140.8-294.4-309.333333-275.2-128 14.933333-230.4 117.333333-243.2 245.333334-10.666667 98.133333 29.866667 185.6 98.133333 241.066666 29.866667 25.6 49.066667 61.866667 49.066667 102.4v6.4h256v-2.133333c0-38.4 17.066667-76.8 46.933333-102.4 61.866667-51.2 102.4-128 102.4-215.466667z",fill:"#FBC02D","p-id":"4680"}}),a("path",{attrs:{d:"M652.8 430.933333l-64-42.666666c-6.4-4.266667-17.066667-4.266667-23.466667 0L512 422.4l-51.2-34.133333c-6.4-4.266667-17.066667-4.266667-23.466667 0l-64 42.666666c-4.266667 4.266667-8.533333 8.533333-8.533333 14.933334s0 12.8 4.266667 17.066666l81.066666 100.266667V789.333333h42.666667V554.666667c0-4.266667-2.133333-8.533333-4.266667-12.8l-70.4-87.466667 32-21.333333 51.2 34.133333c6.4 4.266667 17.066667 4.266667 23.466667 0l51.2-34.133333 32 21.333333-70.4 87.466667c-2.133333 4.266667-4.266667 8.533333-4.266667 12.8v234.666666h42.666667V563.2l81.066667-100.266667c4.266667-4.266667 6.4-10.666667 4.266666-17.066666s-4.266667-12.8-8.533333-14.933334z",fill:"#FFF59D","p-id":"4681"}}),a("path",{attrs:{d:"M512 938.666667m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z",fill:"#5C6BC0","p-id":"4682"}}),a("path",{attrs:{d:"M554.666667 960h-85.333334c-46.933333 0-85.333333-38.4-85.333333-85.333333v-106.666667h256v106.666667c0 46.933333-38.4 85.333333-85.333333 85.333333z",fill:"#9FA8DA","p-id":"4683"}}),a("path",{attrs:{d:"M640 874.666667l-247.466667 34.133333c6.4 14.933333 19.2 29.866667 34.133334 38.4l200.533333-27.733333c8.533333-12.8 12.8-27.733333 12.8-44.8zM384 825.6v42.666667L640 832v-42.666667z",fill:"#5C6BC0","p-id":"4684"}})]),t._v(" "),a("style",[t._v("\n          blockquote {\n            background-color: var(--code-color);\n            border-color: #67cc86;\n            border-left-width: 0.5rem;\n            border-left-style: solid;\n          }\n        ")]),a("p",[t._v("哨兵机制的代码举例："),a("br"),t._v("\n代码一：")]),t._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在数组a中，查找key，返回key所在的位置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其中，n表示数组a的长度")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 边界条件处理，如果a为空，或者n<=0，说明数组中没有数据，就不用while循环比较了")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" null "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里有两个比较操作：i<n和a[i]==key.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("p",[t._v("代码二：")]),t._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在数组a中，查找key，返回key所在的位置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其中，n表示数组a的长度")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我举2个例子，你可以拿例子走一下代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a = {4, 2, 3, 5, 9, 6}  n=6 key = 7")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a = {4, 2, 3, 5, 9, 6}  n=6 key = 6")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" null "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里因为要将a[n-1]的值替换成key，所以要特殊处理这个值")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把a[n-1]的值临时保存在变量tmp中，以便之后恢复。tmp=6。")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 之所以这样做的目的是：希望find()代码不要改变a数组中的内容")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" tmp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把key的值放到a[n-1]中，此时a = {4, 2, 3, 5, 9, 7}")]),t._v("\n  a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// while 循环比起代码一，少了i<n这个比较操作")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 恢复a[n-1]原来的值,此时a= {4, 2, 3, 5, 9, 6}")]),t._v("\n  a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果i == n-1说明，在0...n-2之间都没有key，所以返回-1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 否则，返回i，就是等于key值的元素的下标")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br")])]),a("p",[t._v("对比两段代码，在字符串 a 很长的时候，比如几万、几十万，你觉得哪段代码运行得更快点呢？答案是代码二，因为两段代码中执行次数最多就是 while 循环那一部分。第二段代码中，我们通过一个哨兵 a[n-1] = key，成功省掉了一个比较语句"),a("code",[t._v("i<n")]),t._v("，不要小看这一条语句，当累积执行万次、几十万次时，累积的时间就很明显了。")]),t._v(" "),a("p",[t._v("当然，这只是为了举例说明哨兵的作用，你写代码的时候千万不要写第二段那样的代码，因为可读性太差了。大部分情况下，我们并不需要如此追求极致的性能。")])]),a("h3",{attrs:{id:"技巧四-重点留意边界条件处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#技巧四-重点留意边界条件处理"}},[t._v("#")]),t._v(" 技巧四：重点留意边界条件处理")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("检查链表代码是否正确的边界条件有这样几个：")]),t._v(" "),a("ul",[a("li",[t._v("如果链表为空时，代码是否能正常工作？")]),t._v(" "),a("li",[t._v("如果链表只包含一个结点时，代码是否能正常工作？")]),t._v(" "),a("li",[t._v("如果链表只包含两个结点时，代码是否能正常工作？")]),t._v(" "),a("li",[t._v("代码逻辑在处理头结点和尾结点的时候偶，是否能正常工作？")])]),t._v(" "),a("p",[t._v("边界条件不止我列举的那些。针对不同的场景，可能还有特定的边界条件，这个需要你自己去思考，不过套路都是一样的。")]),t._v(" "),a("p",[t._v("实际上，不光光是写链表代码，你在写任何代码时，也千万不要只是实现业务正常情况下的功能就好了，一定要多想想，你的代码在运行的时候，可能会遇到哪些边界情况或者异常情况。遇到了应该如何应对，这样写出来的代码才够健壮！")])]),a("h3",{attrs:{id:"技巧五-举例画图-辅助思考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#技巧五-举例画图-辅助思考"}},[t._v("#")]),t._v(" 技巧五：举例画图，辅助思考")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("举例法和画图法")]),t._v(" "),a("p",[t._v("比如往单链表中插入一个数据这样一个操作，我一般都是把各种情况都举一个例子，画出插入前和插入后的链表变化，如图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/4a701dd79b59427be654261805b349f8.webp",alt:"举例画图法"}})]),t._v(" "),a("p",[t._v("看图写代码，是不是就简单多啦？而且，当我们写完代码之后，也可以举几个例子，画在纸上，照着代码走一遍，很容易就能发现代码中的 Bug。")])]),a("h3",{attrs:{id:"技巧六-多写多练-没有捷径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#技巧六-多写多练-没有捷径"}},[t._v("#")]),t._v(" 技巧六：多写多练，没有捷径")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("5个常见的链表操作")]),t._v(" "),a("ul",[a("li",[t._v("单链表反转")]),t._v(" "),a("li",[t._v("链表中环的检测")]),t._v(" "),a("li",[t._v("两个有序的链表合并")]),t._v(" "),a("li",[t._v("删除链表倒数第n个结点")]),t._v(" "),a("li",[t._v("求链表的中间结点")])]),t._v(" "),a("p",[t._v("把这几个操作都能写熟练，不熟就多写几遍")])]),a("h2",{attrs:{id:"_08-栈-如何实现浏览器的前进和后退功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_08-栈-如何实现浏览器的前进和后退功能"}},[t._v("#")]),t._v(" 08 | 栈：如何实现浏览器的前进和后退功能？")]),t._v(" "),a("h3",{attrs:{id:"如何理解-栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何理解-栈"}},[t._v("#")]),t._v(" 如何理解“栈”？")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px"},attrs:{t:"1665301607231",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"4678",width:"200",height:"200"}},[a("path",{attrs:{d:"M512 469.333333m-426.666667 0a426.666667 426.666667 0 1 0 853.333334 0 426.666667 426.666667 0 1 0-853.333334 0Z",fill:"#FFF59D","p-id":"4679"}}),a("path",{attrs:{d:"M789.333333 469.333333c0-164.266667-140.8-294.4-309.333333-275.2-128 14.933333-230.4 117.333333-243.2 245.333334-10.666667 98.133333 29.866667 185.6 98.133333 241.066666 29.866667 25.6 49.066667 61.866667 49.066667 102.4v6.4h256v-2.133333c0-38.4 17.066667-76.8 46.933333-102.4 61.866667-51.2 102.4-128 102.4-215.466667z",fill:"#FBC02D","p-id":"4680"}}),a("path",{attrs:{d:"M652.8 430.933333l-64-42.666666c-6.4-4.266667-17.066667-4.266667-23.466667 0L512 422.4l-51.2-34.133333c-6.4-4.266667-17.066667-4.266667-23.466667 0l-64 42.666666c-4.266667 4.266667-8.533333 8.533333-8.533333 14.933334s0 12.8 4.266667 17.066666l81.066666 100.266667V789.333333h42.666667V554.666667c0-4.266667-2.133333-8.533333-4.266667-12.8l-70.4-87.466667 32-21.333333 51.2 34.133333c6.4 4.266667 17.066667 4.266667 23.466667 0l51.2-34.133333 32 21.333333-70.4 87.466667c-2.133333 4.266667-4.266667 8.533333-4.266667 12.8v234.666666h42.666667V563.2l81.066667-100.266667c4.266667-4.266667 6.4-10.666667 4.266666-17.066666s-4.266667-12.8-8.533333-14.933334z",fill:"#FFF59D","p-id":"4681"}}),a("path",{attrs:{d:"M512 938.666667m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z",fill:"#5C6BC0","p-id":"4682"}}),a("path",{attrs:{d:"M554.666667 960h-85.333334c-46.933333 0-85.333333-38.4-85.333333-85.333333v-106.666667h256v106.666667c0 46.933333-38.4 85.333333-85.333333 85.333333z",fill:"#9FA8DA","p-id":"4683"}}),a("path",{attrs:{d:"M640 874.666667l-247.466667 34.133333c6.4 14.933333 19.2 29.866667 34.133334 38.4l200.533333-27.733333c8.533333-12.8 12.8-27.733333 12.8-44.8zM384 825.6v42.666667L640 832v-42.666667z",fill:"#5C6BC0","p-id":"4684"}})]),t._v(" "),a("style",[t._v("\n          blockquote {\n            background-color: var(--code-color);\n            border-color: #67cc86;\n            border-left-width: 0.5rem;\n            border-left-style: solid;\n          }\n        ")]),a("p",[t._v("栈概念")]),t._v(" "),a("blockquote",[a("p",[t._v("后进者先出，先进者后出，这就是典型的“栈”结构"),a("br"),t._v("\n从栈的操作特性上来看，栈是一种“操作受限”的线性表，只允许在一端插入和删除数据。")])])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("事实上，从功能上来说，数组或链表确实可以替代栈，但你要知道，特定的数据结构是对特定场景的抽象，而且，数组或链表暴露了太多的操作接口，操作上的确灵活自由，但使用时就比较不可控，自然也就更容易出错。")]),t._v(" "),a("p",[a("strong",[t._v("当某个数据集合只涉及在一端插入和删除数据，并且满足后进先出、先进后出的特性，这时我们就应该首选“栈”这种数据结构。")])])]),a("h3",{attrs:{id:"如何实现一个-栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现一个-栈"}},[t._v("#")]),t._v(" 如何实现一个“栈”？")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("实际上，栈既可以用数组来实现，也可以用链表来实现。用数组实现的栈，我们叫作"),a("strong",[t._v("顺序栈")]),t._v("，用链表实现的栈，我们叫作"),a("strong",[t._v("链式栈")]),t._v("。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px"},attrs:{t:"1665301607231",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"4678",width:"200",height:"200"}},[a("path",{attrs:{d:"M512 469.333333m-426.666667 0a426.666667 426.666667 0 1 0 853.333334 0 426.666667 426.666667 0 1 0-853.333334 0Z",fill:"#FFF59D","p-id":"4679"}}),a("path",{attrs:{d:"M789.333333 469.333333c0-164.266667-140.8-294.4-309.333333-275.2-128 14.933333-230.4 117.333333-243.2 245.333334-10.666667 98.133333 29.866667 185.6 98.133333 241.066666 29.866667 25.6 49.066667 61.866667 49.066667 102.4v6.4h256v-2.133333c0-38.4 17.066667-76.8 46.933333-102.4 61.866667-51.2 102.4-128 102.4-215.466667z",fill:"#FBC02D","p-id":"4680"}}),a("path",{attrs:{d:"M652.8 430.933333l-64-42.666666c-6.4-4.266667-17.066667-4.266667-23.466667 0L512 422.4l-51.2-34.133333c-6.4-4.266667-17.066667-4.266667-23.466667 0l-64 42.666666c-4.266667 4.266667-8.533333 8.533333-8.533333 14.933334s0 12.8 4.266667 17.066666l81.066666 100.266667V789.333333h42.666667V554.666667c0-4.266667-2.133333-8.533333-4.266667-12.8l-70.4-87.466667 32-21.333333 51.2 34.133333c6.4 4.266667 17.066667 4.266667 23.466667 0l51.2-34.133333 32 21.333333-70.4 87.466667c-2.133333 4.266667-4.266667 8.533333-4.266667 12.8v234.666666h42.666667V563.2l81.066667-100.266667c4.266667-4.266667 6.4-10.666667 4.266666-17.066666s-4.266667-12.8-8.533333-14.933334z",fill:"#FFF59D","p-id":"4681"}}),a("path",{attrs:{d:"M512 938.666667m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z",fill:"#5C6BC0","p-id":"4682"}}),a("path",{attrs:{d:"M554.666667 960h-85.333334c-46.933333 0-85.333333-38.4-85.333333-85.333333v-106.666667h256v106.666667c0 46.933333-38.4 85.333333-85.333333 85.333333z",fill:"#9FA8DA","p-id":"4683"}}),a("path",{attrs:{d:"M640 874.666667l-247.466667 34.133333c6.4 14.933333 19.2 29.866667 34.133334 38.4l200.533333-27.733333c8.533333-12.8 12.8-27.733333 12.8-44.8zM384 825.6v42.666667L640 832v-42.666667z",fill:"#5C6BC0","p-id":"4684"}})]),t._v(" "),a("style",[t._v("\n          blockquote {\n            background-color: var(--code-color);\n            border-color: #67cc86;\n            border-left-width: 0.5rem;\n            border-left-style: solid;\n          }\n        ")]),a("p",[t._v("基于数组的顺序栈")]),t._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 基于数组实现的顺序栈")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayStack")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 栈中元素个数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//栈的大小")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化数组，申请一个大小为n的数组空间")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayStack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 入栈操作")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组空间不够了，直接返回false，入栈失败。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将item放到下标为count的位置，并且count加一")]),t._v("\n    items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 出栈操作")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 栈为空，则直接返回null")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回下标为count-1的数组元素，并且栈中元素个数count减一")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" tmp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br")])]),a("ul",[a("li",[t._v("栈的空间复杂度为O(1)")]),t._v(" "),a("li",[t._v("栈的时间复杂度为O(1)")])])]),a("h3",{attrs:{id:"支持动态扩容的顺序栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持动态扩容的顺序栈"}},[t._v("#")]),t._v(" 支持动态扩容的顺序栈")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px"},attrs:{t:"1665301607231",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"4678",width:"200",height:"200"}},[a("path",{attrs:{d:"M512 469.333333m-426.666667 0a426.666667 426.666667 0 1 0 853.333334 0 426.666667 426.666667 0 1 0-853.333334 0Z",fill:"#FFF59D","p-id":"4679"}}),a("path",{attrs:{d:"M789.333333 469.333333c0-164.266667-140.8-294.4-309.333333-275.2-128 14.933333-230.4 117.333333-243.2 245.333334-10.666667 98.133333 29.866667 185.6 98.133333 241.066666 29.866667 25.6 49.066667 61.866667 49.066667 102.4v6.4h256v-2.133333c0-38.4 17.066667-76.8 46.933333-102.4 61.866667-51.2 102.4-128 102.4-215.466667z",fill:"#FBC02D","p-id":"4680"}}),a("path",{attrs:{d:"M652.8 430.933333l-64-42.666666c-6.4-4.266667-17.066667-4.266667-23.466667 0L512 422.4l-51.2-34.133333c-6.4-4.266667-17.066667-4.266667-23.466667 0l-64 42.666666c-4.266667 4.266667-8.533333 8.533333-8.533333 14.933334s0 12.8 4.266667 17.066666l81.066666 100.266667V789.333333h42.666667V554.666667c0-4.266667-2.133333-8.533333-4.266667-12.8l-70.4-87.466667 32-21.333333 51.2 34.133333c6.4 4.266667 17.066667 4.266667 23.466667 0l51.2-34.133333 32 21.333333-70.4 87.466667c-2.133333 4.266667-4.266667 8.533333-4.266667 12.8v234.666666h42.666667V563.2l81.066667-100.266667c4.266667-4.266667 6.4-10.666667 4.266666-17.066666s-4.266667-12.8-8.533333-14.933334z",fill:"#FFF59D","p-id":"4681"}}),a("path",{attrs:{d:"M512 938.666667m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z",fill:"#5C6BC0","p-id":"4682"}}),a("path",{attrs:{d:"M554.666667 960h-85.333334c-46.933333 0-85.333333-38.4-85.333333-85.333333v-106.666667h256v106.666667c0 46.933333-38.4 85.333333-85.333333 85.333333z",fill:"#9FA8DA","p-id":"4683"}}),a("path",{attrs:{d:"M640 874.666667l-247.466667 34.133333c6.4 14.933333 19.2 29.866667 34.133334 38.4l200.533333-27.733333c8.533333-12.8 12.8-27.733333 12.8-44.8zM384 825.6v42.666667L640 832v-42.666667z",fill:"#5C6BC0","p-id":"4684"}})]),t._v(" "),a("style",[t._v("\n          blockquote {\n            background-color: var(--code-color);\n            border-color: #67cc86;\n            border-left-width: 0.5rem;\n            border-left-style: solid;\n          }\n        ")]),a("p",[t._v("动态扩容的栈的示意图")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/b193adf5db4356d8ab35a1d32142b3da.webp",alt:"动态扩容的栈"}})]),t._v(" "),a("ul",[a("li",[t._v("出栈的时间复杂度始终不变，为O(1)")]),t._v(" "),a("li",[t._v("入栈，当栈申请的内存足够时，时间复杂度为O(1)")]),t._v(" "),a("li",[t._v("入栈，当栈需要扩容时，时间复杂度为O(n)")])]),t._v(" "),a("p",[t._v("对于入栈操作来说，最好情况时间复杂度是O(1)，最坏情况时间复杂度是O(n)。那么入栈的平均时间复杂度是多少？")]),t._v(" "),a("p",[t._v("为了方便分析，需要事先做一些假设和分析：")]),t._v(" "),a("ul",[a("li",[t._v("栈空间不够时，我们重新申请一个是原来大小两倍的数组；")]),t._v(" "),a("li",[t._v("为了简化分析，假设只有入栈操作没有出栈操作；")]),t._v(" "),a("li",[t._v("定义不涉及内存搬移的入栈操作为simple-push操作，时间复杂度为O(1)")])]),t._v(" "),a("p",[t._v("如果当前栈大小为 K，并且已满，当再有新的数据要入栈时，就需要重新申请 2 倍大小的内存，并且做 K 个数据的搬移操作，然后再入栈。但是，接下来的 K-1 次入栈操作，我们都不需要再重新申请内存和搬移数据，所以这 K-1 次入栈操作都只需要一个 simple-push 操作就可以完成。为了让你更加直观地理解这个过程，请看下面这张图。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/c936a39ad54a9fdf526e805dc18cf6bb.webp",alt:"入栈的时间复杂度"}})]),t._v(" "),a("p",[t._v("这 K 次入栈操作，总共涉及了 K 个数据的搬移，以及 K 次 simple-push 操作。将 K 个数据搬移均摊到 K 次入栈操作，那每个入栈操作只需要一个数据搬移和一个 simple-push 操作。以此类推，入栈操作的均摊时间复杂度就为 O(1)。")]),t._v(" "),a("p",[t._v("通过这个例子的实战分析，也印证了前面讲到的，均摊时间复杂度一般都等于最好情况时间复杂度。因为在大部分情况下，入栈操作的时间复杂度 O 都是 O(1)，只有在个别时刻才会退化为 O(n)，所以把耗时多的入栈操作的时间均摊到其他入栈操作上，平均情况下的耗时就接近 O(1)。")])]),a("h3",{attrs:{id:"栈在函数调用中的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈在函数调用中的应用"}},[t._v("#")]),t._v(" 栈在函数调用中的应用")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("操作系统给每个线程分配了一块独立的内存空间，这块内存被组织成“栈”这种结构, 用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。为了更好地理解，看下这段代码的执行过程。")]),t._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ret"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   reuturn "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("p",[t._v("上述代码中对应的函数栈里出栈、入栈的操作，如图所示")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/17b6c6711e8d60b61d65fb0df5559a1c.webp",alt:"函数调用栈"}})])]),a("h3",{attrs:{id:"栈在表达式求值中的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈在表达式求值中的应用"}},[t._v("#")]),t._v(" 栈在表达式求值中的应用")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("编译器如何利用栈来实现"),a("strong",[t._v("表达式求值")])]),t._v(" "),a("p",[t._v("比如一个简单的四则运算："),a("code",[t._v("34+13*9+44-12/3")])]),t._v(" "),a("p",[t._v("编译器通过两个栈来实现，其中一个保存操作数的栈，另一个是保存运算符的栈。从左向右遍历表达式，当遇到数字，就压入操作数栈；当遇到运算符，就与运算符栈顶元素进行比较。")]),t._v(" "),a("p",[t._v("如果比运算符栈顶元素的优先级高，就将当前运算符压入栈；如果比运算符栈顶元素的优先级低或者相同，从运算符栈中取栈顶运算符，从操作数栈的栈顶取 2 个操作数，然后进行计算，再把计算完的结果压入操作数栈，继续比较。")]),t._v(" "),a("p",[t._v("我们将"),a("code",[t._v("3+5*8-6")]),t._v("这个表达式的计算过程画成一张图")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/bc77c8d33375750f1700eb7778551600.webp",alt:"利用栈来实现表达式求值"}})])]),a("h3",{attrs:{id:"栈在括号匹配中的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈在括号匹配中的应用"}},[t._v("#")]),t._v(" 栈在括号匹配中的应用")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("假设表达式中只包含三种括号："),a("code",[t._v("()")]),t._v("、"),a("code",[t._v("[]")]),t._v("、"),a("code",[t._v("{}")]),t._v("，并且它们可以任意嵌套。")]),t._v(" "),a("p",[t._v("我们用栈来保存未匹配的左括号，从左到右依次扫描字符串。当扫描到左括号时，则将其压入栈中；当扫描到右括号时，从栈顶取出一个左括号。如果能够匹配，比如“(”跟“)”匹配，“[”跟“]”匹配，“{”跟“}”匹配，则继续扫描剩下的字符串。如果扫描的过程中，遇到不能配对的右括号，或者栈中没有数据，则说明为非法格式。")]),t._v(" "),a("p",[t._v("当所有的括号都扫描完成之后，如果栈为空，则说明字符串为合法格式；否则，说明有未匹配的左括号，为非法格式。")])]),a("h3",{attrs:{id:"浏览器前进、后退功能的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器前进、后退功能的实现"}},[t._v("#")]),t._v(" 浏览器前进、后退功能的实现")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("我们使用两个栈，X 和 Y，我们把首次浏览的页面依次压入栈 X，当点击后退按钮时，再依次从栈 X 中出栈，并将出栈的数据依次放入栈 Y。当我们点击前进按钮时，我们依次从栈 Y 中取出数据，放入栈 X 中。当栈 X 中没有数据时，那就说明没有页面可以继续后退浏览了。当栈 Y 中没有数据，那就说明没有页面可以点击前进按钮浏览了。")]),t._v(" "),a("p",[t._v("比如你顺序查看了 a，b，c 三个页面，我们就依次把 a，b，c 压入栈，这个时候，两个栈的数据就是这个样子：\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/4b579a76ea7ebfc5abae2ad6ae6a3c3d.webp",alt:""}})]),t._v(" "),a("p",[t._v("当你通过浏览器的后退按钮，从页面 c 后退到页面 a 之后，我们就依次把 c 和 b 从栈 X 中弹出，并且依次放入到栈 Y。这个时候，两个栈的数据就是这个样子：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/b5e496e2e28fe08f0388958a0e12861b.webp",alt:""}})]),t._v(" "),a("p",[t._v("这个时候你又想看页面 b，于是你又点击前进按钮回到 b 页面，我们就把 b 再从栈 Y 中出栈，放入栈 X 中。此时两个栈的数据是这个样子：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/ea804125bea25d25ba467a51fb98c4bc.webp",alt:""}})]),t._v(" "),a("p",[t._v("这个时候，你通过页面 b 又跳转到新的页面 d 了，页面 c 就无法再通过前进、后退按钮重复查看了，所以需要清空栈 Y。此时两个栈的数据这个样子：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/a3c926fe3050d9a741f394f20430692e.webp",alt:""}})])]),a("h2",{attrs:{id:"_09-队列-队列在线程池等有限资源池中的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_09-队列-队列在线程池等有限资源池中的应用"}},[t._v("#")]),t._v(" 09 | 队列：队列在线程池等有限资源池中的应用")]),t._v(" "),a("h3",{attrs:{id:"如何理解队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何理解队列"}},[t._v("#")]),t._v(" 如何理解队列？")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("先进者先出，这就是典型的“队列”。")]),t._v(" "),a("p",[t._v("栈只有两个基本操作："),a("strong",[t._v("入栈push()和出栈pop()")]),t._v("。队列跟栈非常相似，支持的操作也很有限，最基本的操作也是两个："),a("strong",[t._v("入队enqueue()")]),t._v("，放一个数据到队列尾部："),a("strong",[t._v("出队dequeue()，从队列头部取一个元素")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/9eca53f9b557b1213c5d94b94e9dce3e.webp",alt:"队列和栈"}})]),t._v(" "),a("p",[t._v("所以，队列跟栈一样，也是一种"),a("strong",[t._v("操作受限的线性表数据结构")]),t._v("。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("作为一种非常基础的数据结构，队列的应用也非常广泛，特别是一些具有某些额外特性的队列，比如循环队列、阻塞队列、并发队列。它们在很多偏底层系统、框架、中间件的开发中，起着关键性的作用。比如高性能队列Disruptor、Linux环形缓存，都用到了循环并发队列；")])]),a("h3",{attrs:{id:"顺序队列和链式队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序队列和链式队列"}},[t._v("#")]),t._v(" 顺序队列和链式队列")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px"},attrs:{t:"1665301607231",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"4678",width:"200",height:"200"}},[a("path",{attrs:{d:"M512 469.333333m-426.666667 0a426.666667 426.666667 0 1 0 853.333334 0 426.666667 426.666667 0 1 0-853.333334 0Z",fill:"#FFF59D","p-id":"4679"}}),a("path",{attrs:{d:"M789.333333 469.333333c0-164.266667-140.8-294.4-309.333333-275.2-128 14.933333-230.4 117.333333-243.2 245.333334-10.666667 98.133333 29.866667 185.6 98.133333 241.066666 29.866667 25.6 49.066667 61.866667 49.066667 102.4v6.4h256v-2.133333c0-38.4 17.066667-76.8 46.933333-102.4 61.866667-51.2 102.4-128 102.4-215.466667z",fill:"#FBC02D","p-id":"4680"}}),a("path",{attrs:{d:"M652.8 430.933333l-64-42.666666c-6.4-4.266667-17.066667-4.266667-23.466667 0L512 422.4l-51.2-34.133333c-6.4-4.266667-17.066667-4.266667-23.466667 0l-64 42.666666c-4.266667 4.266667-8.533333 8.533333-8.533333 14.933334s0 12.8 4.266667 17.066666l81.066666 100.266667V789.333333h42.666667V554.666667c0-4.266667-2.133333-8.533333-4.266667-12.8l-70.4-87.466667 32-21.333333 51.2 34.133333c6.4 4.266667 17.066667 4.266667 23.466667 0l51.2-34.133333 32 21.333333-70.4 87.466667c-2.133333 4.266667-4.266667 8.533333-4.266667 12.8v234.666666h42.666667V563.2l81.066667-100.266667c4.266667-4.266667 6.4-10.666667 4.266666-17.066666s-4.266667-12.8-8.533333-14.933334z",fill:"#FFF59D","p-id":"4681"}}),a("path",{attrs:{d:"M512 938.666667m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z",fill:"#5C6BC0","p-id":"4682"}}),a("path",{attrs:{d:"M554.666667 960h-85.333334c-46.933333 0-85.333333-38.4-85.333333-85.333333v-106.666667h256v106.666667c0 46.933333-38.4 85.333333-85.333333 85.333333z",fill:"#9FA8DA","p-id":"4683"}}),a("path",{attrs:{d:"M640 874.666667l-247.466667 34.133333c6.4 14.933333 19.2 29.866667 34.133334 38.4l200.533333-27.733333c8.533333-12.8 12.8-27.733333 12.8-44.8zM384 825.6v42.666667L640 832v-42.666667z",fill:"#5C6BC0","p-id":"4684"}})]),t._v(" "),a("style",[t._v("\n          blockquote {\n            background-color: var(--code-color);\n            border-color: #67cc86;\n            border-left-width: 0.5rem;\n            border-left-style: solid;\n          }\n        ")]),a("p",[t._v("队列的实现方式")]),t._v(" "),a("blockquote",[a("p",[t._v("跟栈一样，队列可以用数组来实现，也可以用链表来实现。用数组实现的栈叫作顺序栈，用链表实现的栈叫作链式栈。同样，用数组实现的队列叫作"),a("strong",[t._v("顺序队列")]),t._v("，用链表实现的队列叫作"),a("strong",[t._v("链式队列")]),t._v("。")])])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("基于数组实现的队列")]),t._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用数组实现的队列")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayQueue")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组：items，数组大小：n")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// head表示队头下标，tail表示队尾下标")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" tail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 申请一个大小为capacity的数组")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" capacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    items "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("capacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" capacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 入队")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("enqueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果tail == n 表示队列已经满了")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 出队")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dequeue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果head == tail 表示队列为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为了让其他语言的同学看的更加明确，把--操作放到单独一行来写了")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ret"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br")])]),a("p",[t._v("对于栈来说，我们只需要一个栈顶指针就可以了。但是队列需要两个指针：一个是 head 指针，指向队头；一个是 tail 指针，指向队尾。")]),t._v(" "),a("p",[t._v("结合下面这张图来理解。当 a、b、c、d 依次入队之后，队列中的 head 指针指向下标为 0 的位置，tail 指针指向下标为 4 的位置。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/5c0ec42eb797e8a7d48c9dbe89dc93cb.webp",alt:"队列示意图"}})]),t._v(" "),a("p",[t._v("当我们调用两次出队操作之后，队列中 head 指针指向下标为 2 的位置，tail 指针仍然指向下标为 4 的位置。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/dea27f2c505dd8d0b6b86e262d03430d.webp",alt:"出队操作"}})]),t._v(" "),a("p",[t._v("根据图片的示意，随着不停地进行入队、出队操作，head和tail斗殴会持续往后移动。当tail移动到最右边，即使数组中还有空闲空间，也无法继续往队列中添加数据了。")]),t._v(" "),a("p",[t._v("解决这个问题需要用到"),a("strong",[t._v("数据搬移！")]),t._v("。但是每次进行出队操作都相当于删除数组下标为0的数据，需要搬移整个队列中的数据，这样出队操作的时间复杂度就会从原来的O(1)变为O(n)。")]),t._v(" "),a("p",[t._v("实际上，可以不用在每次出队时都搬移数据。如果没有空闲空间了，我们只需要在入队时，再集中触发一次数据的搬移操作。")]),t._v(" "),a("p",[t._v("下面是具体的代码：")]),t._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 入队操作，将item放入队尾")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("enqueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// tail == n表示队列末尾没有空间了")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// tail ==n && head==0，表示整个队列都占满了")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据搬移")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 搬移完之后重新更新head和tail")]),t._v("\n    tail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("p",[t._v("从代码中，我们可以将head到tail之间的数据，整体搬移到数组中 0 到tail-head的位置。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/094ba7722eeec46ead58b40c097353c7.webp",alt:"队列中数据搬移"}})]),t._v(" "),a("p",[t._v("这种情况下，出队的时间复杂度为O(1)。入队的时间复杂度最好情况下是O(1)，最坏情况下是O(n)，平均时间复杂度是O(1)。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("基于链表的队列实现方法")]),t._v(" "),a("p",[t._v("基于链表的实现，我们同样需要两个指针：head 指针和 tail 指针。它们分别指向链表的第一个结点和最后一个结点。如图所示，入队时，tail->next= new_node, tail = tail->next；出队时，head = head->next。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/c916fe2212f8f543ddf539296444d393.webp",alt:"基于链表的队列"}})])]),a("h3",{attrs:{id:"循环队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环队列"}},[t._v("#")]),t._v(" 循环队列")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("循环队列可以解决用数据来实现队列存在的数据搬移操作。即："),a("strong",[t._v("循环队列可以避免数据搬移")]),t._v("。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px"},attrs:{t:"1665301607231",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"4678",width:"200",height:"200"}},[a("path",{attrs:{d:"M512 469.333333m-426.666667 0a426.666667 426.666667 0 1 0 853.333334 0 426.666667 426.666667 0 1 0-853.333334 0Z",fill:"#FFF59D","p-id":"4679"}}),a("path",{attrs:{d:"M789.333333 469.333333c0-164.266667-140.8-294.4-309.333333-275.2-128 14.933333-230.4 117.333333-243.2 245.333334-10.666667 98.133333 29.866667 185.6 98.133333 241.066666 29.866667 25.6 49.066667 61.866667 49.066667 102.4v6.4h256v-2.133333c0-38.4 17.066667-76.8 46.933333-102.4 61.866667-51.2 102.4-128 102.4-215.466667z",fill:"#FBC02D","p-id":"4680"}}),a("path",{attrs:{d:"M652.8 430.933333l-64-42.666666c-6.4-4.266667-17.066667-4.266667-23.466667 0L512 422.4l-51.2-34.133333c-6.4-4.266667-17.066667-4.266667-23.466667 0l-64 42.666666c-4.266667 4.266667-8.533333 8.533333-8.533333 14.933334s0 12.8 4.266667 17.066666l81.066666 100.266667V789.333333h42.666667V554.666667c0-4.266667-2.133333-8.533333-4.266667-12.8l-70.4-87.466667 32-21.333333 51.2 34.133333c6.4 4.266667 17.066667 4.266667 23.466667 0l51.2-34.133333 32 21.333333-70.4 87.466667c-2.133333 4.266667-4.266667 8.533333-4.266667 12.8v234.666666h42.666667V563.2l81.066667-100.266667c4.266667-4.266667 6.4-10.666667 4.266666-17.066666s-4.266667-12.8-8.533333-14.933334z",fill:"#FFF59D","p-id":"4681"}}),a("path",{attrs:{d:"M512 938.666667m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z",fill:"#5C6BC0","p-id":"4682"}}),a("path",{attrs:{d:"M554.666667 960h-85.333334c-46.933333 0-85.333333-38.4-85.333333-85.333333v-106.666667h256v106.666667c0 46.933333-38.4 85.333333-85.333333 85.333333z",fill:"#9FA8DA","p-id":"4683"}}),a("path",{attrs:{d:"M640 874.666667l-247.466667 34.133333c6.4 14.933333 19.2 29.866667 34.133334 38.4l200.533333-27.733333c8.533333-12.8 12.8-27.733333 12.8-44.8zM384 825.6v42.666667L640 832v-42.666667z",fill:"#5C6BC0","p-id":"4684"}})]),t._v(" "),a("style",[t._v("\n          blockquote {\n            background-color: var(--code-color);\n            border-color: #67cc86;\n            border-left-width: 0.5rem;\n            border-left-style: solid;\n          }\n        ")]),a("p",[t._v("看图，感受下循环队列：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/58ba37bb4102b87d66dffe7148b0f990.webp",alt:"循环队列"}})]),t._v(" "),a("p",[t._v("图中这个队列的大小为 8，当前 head=4，tail=7。当有一个新的元素 a 入队时，我们放入下标为 7 的位置。但这个时候，我们并不把 tail 更新为 8，而是将其在环中后移一位，到下标为 0 的位置。当再有一个元素 b 入队时，我们将 b 放入下标为 0 的位置，然后 tail 加 1 更新为 1。所以，在 a，b 依次入队之后，循环队列中的元素就变成了下面的样子：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/71a41effb54ccea9dd463bde1b6abe80.webp",alt:"循环队列的入队"}})]),t._v(" "),a("p",[t._v("通过这样的方法，我们成功避免了数据搬移操作。")]),t._v(" "),a("p",[t._v("要想写出没有 bug 的循环队列的实现代码，最关键的是，确定好队空和队满的判定条件。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("循环队列中，判断队列为空的判断条件仍然是 head == tail。但是队列满的判断条件就稍微有点复杂。先看一张队列满的图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/3d81a44f8c42b3ceee55605f9aeedcec.webp",alt:"循环满队列"}})]),t._v(" "),a("p",[t._v("就像图中画的队满的情况，tail=3，head=4，n=8，所以总结一下规律就是：(3+1)%8=4。多画几张队满的图，你就会发现，当队满时，(tail+1)%n=head。")]),t._v(" "),a("p",[t._v("当队列满时，图中的 tail 指向的位置实际上是没有存储数据的。所以，循环队列会浪费一个数组的存储空间。")]),t._v(" "),a("p",[t._v("代码示意：")]),t._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CircularQueue")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组：items，数组大小：n")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// head表示队头下标，tail表示队尾下标")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" tail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 申请一个大小为capacity的数组")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CircularQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" capacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    items "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("capacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" capacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 入队")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("enqueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 队列满了")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    tail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 出队")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dequeue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果head == tail 表示队列为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ret"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br")])])]),a("h3",{attrs:{id:"阻塞队列和并发队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻塞队列和并发队列"}},[t._v("#")]),t._v(" 阻塞队列和并发队列")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("阻塞队列和并发队列这种特殊特性的队列应用会比较广泛。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("阻塞队列其实就是在队列基础上增加了阻塞操作。")]),t._v(" "),a("p",[t._v("在队列为空的时候，从队头取数据会被阻塞。因为此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后再插入数据，然后再返回。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/5ef3326181907dea0964f612890185eb.webp",alt:"阻塞队列"}})]),t._v(" "),a("p",[t._v("上述的定义就是一个“生产者 - 消费者模型”！是的，我们可以使用阻塞队列，轻松实现一个“生产者 - 消费者模型”！")]),t._v(" "),a("p",[t._v("这种基于阻塞队列实现的“生产者 - 消费者模型”，可以有效地协调生产和消费的速度。当“生产者”生产数据的速度过快，“消费者”来不及消费时，存储数据的队列很快就会满了。这个时候，生产者就阻塞等待，直到“消费者”消费了数据，“生产者”才会被唤醒继续“生产”。")]),t._v(" "),a("p",[t._v("而且不仅如此，基于阻塞队列，我们还可以通过协调“生产者”和“消费者”的个数，来提高数据的处理效率。比如前面的例子，我们可以多配置几个“消费者”，来应对一个“生产者”。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/9f539cc0f1edc20e7fa6559193898067.webp",alt:"阻塞队列-生产端多个消费者"}})])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("线程安全的队列我们叫作并发队列。最简单直接的实现方式是直接在 enqueue()、dequeue() 方法上加锁，但是锁粒度大并发度会比较低，同一时刻仅允许一个存或者取操作。实际上，基于数组的循环队列，利用 CAS 原子操作，可以实现非常高效的并发队列。这也是循环队列比链式队列应用更加广泛的原因。")])]),a("h2",{attrs:{id:"_10-递归-如何利用三行代码找到-最终推荐人"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-递归-如何利用三行代码找到-最终推荐人"}},[t._v("#")]),t._v(" 10 | 递归：如何利用三行代码找到“最终推荐人”？")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px"},attrs:{t:"1665301607231",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"4678",width:"200",height:"200"}},[a("path",{attrs:{d:"M512 469.333333m-426.666667 0a426.666667 426.666667 0 1 0 853.333334 0 426.666667 426.666667 0 1 0-853.333334 0Z",fill:"#FFF59D","p-id":"4679"}}),a("path",{attrs:{d:"M789.333333 469.333333c0-164.266667-140.8-294.4-309.333333-275.2-128 14.933333-230.4 117.333333-243.2 245.333334-10.666667 98.133333 29.866667 185.6 98.133333 241.066666 29.866667 25.6 49.066667 61.866667 49.066667 102.4v6.4h256v-2.133333c0-38.4 17.066667-76.8 46.933333-102.4 61.866667-51.2 102.4-128 102.4-215.466667z",fill:"#FBC02D","p-id":"4680"}}),a("path",{attrs:{d:"M652.8 430.933333l-64-42.666666c-6.4-4.266667-17.066667-4.266667-23.466667 0L512 422.4l-51.2-34.133333c-6.4-4.266667-17.066667-4.266667-23.466667 0l-64 42.666666c-4.266667 4.266667-8.533333 8.533333-8.533333 14.933334s0 12.8 4.266667 17.066666l81.066666 100.266667V789.333333h42.666667V554.666667c0-4.266667-2.133333-8.533333-4.266667-12.8l-70.4-87.466667 32-21.333333 51.2 34.133333c6.4 4.266667 17.066667 4.266667 23.466667 0l51.2-34.133333 32 21.333333-70.4 87.466667c-2.133333 4.266667-4.266667 8.533333-4.266667 12.8v234.666666h42.666667V563.2l81.066667-100.266667c4.266667-4.266667 6.4-10.666667 4.266666-17.066666s-4.266667-12.8-8.533333-14.933334z",fill:"#FFF59D","p-id":"4681"}}),a("path",{attrs:{d:"M512 938.666667m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z",fill:"#5C6BC0","p-id":"4682"}}),a("path",{attrs:{d:"M554.666667 960h-85.333334c-46.933333 0-85.333333-38.4-85.333333-85.333333v-106.666667h256v106.666667c0 46.933333-38.4 85.333333-85.333333 85.333333z",fill:"#9FA8DA","p-id":"4683"}}),a("path",{attrs:{d:"M640 874.666667l-247.466667 34.133333c6.4 14.933333 19.2 29.866667 34.133334 38.4l200.533333-27.733333c8.533333-12.8 12.8-27.733333 12.8-44.8zM384 825.6v42.666667L640 832v-42.666667z",fill:"#5C6BC0","p-id":"4684"}})]),t._v(" "),a("style",[t._v("\n          blockquote {\n            background-color: var(--code-color);\n            border-color: #67cc86;\n            border-left-width: 0.5rem;\n            border-left-style: solid;\n          }\n        ")]),a("p",[t._v("如何理解递归？")]),t._v(" "),a("blockquote",[a("p",[t._v("去的过程叫“递”，回来的过程叫归。基本上，所有递归问题都可以用递归公式来表示。")])]),t._v(" "),a("p",[t._v("比如，想在电影院中寻找自己在哪一排，可以写成这样的公式：")]),t._v(" "),a("div",{staticClass:"language-base line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("f(n) = f(n-1)+1\n其中，f(1)=1\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("f(n)表示你想知道自己在哪一排，f(n-1)表示前面一排所在的排数，f(1)=1表示第一排的人知道自己在第一排。有了这个公式，可以很轻松写出递归代码：")]),t._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])]),a("h3",{attrs:{id:"递归需要满足的三个条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归需要满足的三个条件"}},[t._v("#")]),t._v(" 递归需要满足的三个条件")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("只要同时满足这三个条件，就可以用递归来解决。")]),t._v(" "),a("ol",[a("li",[t._v("一个问题的解可以分解为几个子问题的解")])]),t._v(" "),a("ul",[a("li",[t._v("子问题就是数据规模更小的问题。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样")]),t._v(" "),a("li",[t._v("存在递归终止条件")])])]),a("h3",{attrs:{id:"如何编写递归代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何编写递归代码"}},[t._v("#")]),t._v(" 如何编写递归代码")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("写递归代码最关键的是"),a("strong",[t._v("写出递归公式，找到终止条件")]),t._v("。")]),t._v(" "),a("p",[t._v("加入这里有n个台阶，每次你可以跨1个台阶或者2个台阶，请问走这个n个台阶有多少种走法？如果有7个台阶，你可以2，2，2，1走上去，也可以1，2，1，1，2走上去。总之走法有很多，那如何用编程求得总共有多少种走法呢？")]),t._v(" "),a("p",[t._v("可以根据第一步的走法把所有走法分为两类，第一类是第一步走了1个台阶，另一类是第一步走了2个台阶。所以n个台阶的走法就等于先走1阶后，n-1个台阶的走法加上先走2阶后，n-2个台阶的走法。用公式表示就是：")]),t._v(" "),a("div",{staticClass:"language-base line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("f(n) = f(n-1)+f(n-2)\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("递归终止条件是f(1)=1，f(2)=2。")]),t._v(" "),a("p",[t._v("把递归终止条件和刚刚得到的公式放在一起是这样的：")]),t._v(" "),a("div",{staticClass:"language-base line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("f(1)=1;\nf(2)=2;\nf(n)=f(n-1)+f(n-2);\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("有了公式后，转化成代码：")]),t._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[a("strong",[t._v("写递归代码的关键就是找到如何将大问题分解为小问题的规律，并且基于此写出递归公式，然后在推敲终止条件，最后将递归公式和终止条件翻译成代码。")])])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("对于递归代码，这种试图想清楚整个递归过程的做法，实际上是进入了一个思维误区。很多时候，我们理解起来比较吃力，主要原因就是自己给自己制造了这种理解障碍。那正确的思维方式应该是怎样的？")]),t._v(" "),a("p",[t._v("如果一个问题A可以分解为若干子问题B、C、D，你可以假设子问题B、C、D已经解决，再次基础上思考如何解决问题A。而且，你只需要思考问题A与子问题B、C、D两层之间的关系即可，不需要一层层往下思考子问题与子子问题，子子问题与子子子问题之间的关系。屏蔽掉递归细节，这样子理解起来就简单很多了。")]),t._v(" "),a("p",[t._v("因此，编写递归代码的关键是，"),a("strong",[t._v("只要遇到递归，我们就把它抽象成一个递归公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤")]),t._v("。")])]),a("h3",{attrs:{id:"递归代码要警惕堆栈溢出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归代码要警惕堆栈溢出"}},[t._v("#")]),t._v(" 递归代码要警惕堆栈溢出")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("堆栈溢出会造成系统性崩溃，后果会非常严重。")]),t._v(" "),a("p",[t._v("系统栈或虚拟机栈空间一般都不大。如果递归求解的数据规模很大，调用层次很深，一直压入栈，就会有堆栈溢出的风险。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("避免出现堆栈溢出可以通过在代码中限制递归调用的最大深度的方式来解决这个问题。递归调用超过一定深度（比如1000）之后，就不再继续往下递归，直接返回报错。比如下面的伪代码片段，为了代码简洁，有些边界条件没有考虑，比如 x<=0。")]),t._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全局变量，表示递归的深度。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" depth "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("depth；\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("depth "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" exception"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])])]),a("h3",{attrs:{id:"递归代码要警惕重复计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归代码要警惕重复计算"}},[t._v("#")]),t._v(" 递归代码要警惕重复计算")]),t._v(" "),a("p",[t._v("刚才讲的询阶梯的递归代码例子，如果吧整个递归过程分解一下的话，是这样的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/e7e778994e90265344f6ac9da39e01bf.webp",alt:"递归分解图"}})]),t._v(" "),a("p",[t._v("从图中，可以直观地看到，想要计算f(5)，需要先计算f(4)和f(3)，而计算f(4)还需要计算f(3)，因此，f(3)就被计算了很多次，f(4)同理。这就是重复计算问题。")]),t._v(" "),a("p",[t._v("可以通过一个数据结构来避免重复计算，比如散列表来保存已经求过的f(k)。当递归到f(k)时，先看下是否已经求解过了。")]),t._v(" "),a("p",[t._v("按照这个思路来改下刚才的代码：")]),t._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hasSolvedList可以理解成一个Map，key是n，value是f(n)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hasSolvedList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" hasSolvedList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  hasSolvedList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ret"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ret"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("h3",{attrs:{id:"怎么将递归代码改写成非递归代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么将递归代码改写成非递归代码"}},[t._v("#")]),t._v(" 怎么将递归代码改写成非递归代码？")]),t._v(" "),a("p",[t._v("利是递归代码的表达力很强，写起来非常简洁；而弊就是空间复杂度高、有堆栈溢出的风险、存在重复计算、过多的函数调用会耗时较多等问题。")]),t._v(" "),a("p",[t._v("把电影院的递归代码可以改成这样：")]),t._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ret"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("第二个询阶梯的递归代码可以改成这样：")]),t._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pre "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" prepre "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pre "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" prepre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    prepre "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    pre "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ret"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ret"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("p",[t._v("笼统的讲，可以将所有的递归代码都改成这种迭代循环的非递归写法。")]),t._v(" "),a("p",[t._v("只不过我们使用的栈是系统或者虚拟机本身提供的，我们没有感知罢了。如果我们自己在内存堆上实现栈，手动模拟入栈、出栈过程，这样任何递归代码都可以改写成看上去不是递归代码的样子。")]),t._v(" "),a("h2",{attrs:{id:"_11-排序-上-为什么插入排序比冒泡排序更受欢迎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-排序-上-为什么插入排序比冒泡排序更受欢迎"}},[t._v("#")]),t._v(" 11 | 排序（上）：为什么插入排序比冒泡排序更受欢迎")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("排序算法的执行效率")]),t._v(" "),a("ol",[a("li",[t._v("最好情况、最坏情况、平均情况时间复杂度")])]),t._v(" "),a("p",[t._v("为什么要区分这三种时间复杂度？第一，有些排序算法会区分，为了好对比，所以我们最好都做一下区分。第二，对于要排序的数据，有的接近有序，有的完全 无序。有序度不同的数据，对于排序的执行时间肯定会有影响的，我们要知道排序算法在不同数据下的西性能表现。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("时间复杂度的系数、常数、低阶")])]),t._v(" "),a("p",[t._v("时间复杂度反映的是数据规模 n 很大的时候一个增长趋势，所以它表示的时候会忽略系数、常数、低阶。在实际开发中，排序的数据规模可能是10个、100个、1000个这样规模较小的数据，所以，在对同一阶时间复杂度的排序算法性能对比的时候，我们就要把系数、常数、低阶也考虑进来。")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("比较次数和交换（或移动）次数")])]),t._v(" "),a("p",[t._v("基于比较的排序算法的执行过程，会涉及两种操作，一种是元素比较大小，另一种是元素交换或移动。如果我们在分析排序算法的执行效率的时候，应该把比较次数和交换（或移动）次数也考虑进去。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("排序算法的内存消耗")]),t._v(" "),a("p",[t._v("针对排序算法的空间复杂度，引入了一个新的概念，"),a("strong",[t._v("原地排序（Sorted in place）")]),t._v("。就是特指空间复杂度是O(1)的排序算法。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("排序算法的稳定性")]),t._v(" "),a("p",[t._v("针对排序算法，还有一个重要的度量指标，"),a("strong",[t._v("稳定性")]),t._v("。这个概念是说：如果待排序的序列中存在值相等的元素，经过排序之后，相等元素之间原有的先后顺序不变。")]),t._v(" "),a("p",[t._v("举一个例子，有一组数据2、9、3、4、8、3。按照大小排序之后就是2、3、3、4、8、9。经过某种排序算法之后，如果两个3的前后顺序没有改变，那么就把这种排序算法叫做"),a("strong",[t._v("稳定的排序算法")]),t._v("。如果前后顺序发生变化，就叫做"),a("strong",[t._v("不稳定的排序算法")]),t._v("。")])]),a("h3",{attrs:{id:"冒泡排序-bubble-sort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序-bubble-sort"}},[t._v("#")]),t._v(" 冒泡排序（Bubble Sort）")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("冒泡排序只会操作相邻的两个数据。每次冒泡操作都会对相邻的两个元素进行比较，看是否满足大小关系要求。如果不满足就让它俩互换。一次冒泡会让至少一个元素移动到它应该在的位置，重复n次，就完成了n个数据的排序工作。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px"},attrs:{t:"1665301607231",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"4678",width:"200",height:"200"}},[a("path",{attrs:{d:"M512 469.333333m-426.666667 0a426.666667 426.666667 0 1 0 853.333334 0 426.666667 426.666667 0 1 0-853.333334 0Z",fill:"#FFF59D","p-id":"4679"}}),a("path",{attrs:{d:"M789.333333 469.333333c0-164.266667-140.8-294.4-309.333333-275.2-128 14.933333-230.4 117.333333-243.2 245.333334-10.666667 98.133333 29.866667 185.6 98.133333 241.066666 29.866667 25.6 49.066667 61.866667 49.066667 102.4v6.4h256v-2.133333c0-38.4 17.066667-76.8 46.933333-102.4 61.866667-51.2 102.4-128 102.4-215.466667z",fill:"#FBC02D","p-id":"4680"}}),a("path",{attrs:{d:"M652.8 430.933333l-64-42.666666c-6.4-4.266667-17.066667-4.266667-23.466667 0L512 422.4l-51.2-34.133333c-6.4-4.266667-17.066667-4.266667-23.466667 0l-64 42.666666c-4.266667 4.266667-8.533333 8.533333-8.533333 14.933334s0 12.8 4.266667 17.066666l81.066666 100.266667V789.333333h42.666667V554.666667c0-4.266667-2.133333-8.533333-4.266667-12.8l-70.4-87.466667 32-21.333333 51.2 34.133333c6.4 4.266667 17.066667 4.266667 23.466667 0l51.2-34.133333 32 21.333333-70.4 87.466667c-2.133333 4.266667-4.266667 8.533333-4.266667 12.8v234.666666h42.666667V563.2l81.066667-100.266667c4.266667-4.266667 6.4-10.666667 4.266666-17.066666s-4.266667-12.8-8.533333-14.933334z",fill:"#FFF59D","p-id":"4681"}}),a("path",{attrs:{d:"M512 938.666667m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z",fill:"#5C6BC0","p-id":"4682"}}),a("path",{attrs:{d:"M554.666667 960h-85.333334c-46.933333 0-85.333333-38.4-85.333333-85.333333v-106.666667h256v106.666667c0 46.933333-38.4 85.333333-85.333333 85.333333z",fill:"#9FA8DA","p-id":"4683"}}),a("path",{attrs:{d:"M640 874.666667l-247.466667 34.133333c6.4 14.933333 19.2 29.866667 34.133334 38.4l200.533333-27.733333c8.533333-12.8 12.8-27.733333 12.8-44.8zM384 825.6v42.666667L640 832v-42.666667z",fill:"#5C6BC0","p-id":"4684"}})]),t._v(" "),a("style",[t._v("\n          blockquote {\n            background-color: var(--code-color);\n            border-color: #67cc86;\n            border-left-width: 0.5rem;\n            border-left-style: solid;\n          }\n        ")]),a("p",[t._v("比如，我们对这一组数据4、5、6、3、2、1，从小到大进行排序。第一次冒泡是这样的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/4038f64f47975ab9f519e4f739e464e9.webp",alt:"第一次冒泡排序"}})]),t._v(" "),a("p",[t._v("可以看出，经过一次冒泡排序之后，6这个元素已经存储在正确的位置上。要想完成所有数据的排序，只需要进行6次这样的冒泡操作就行了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/9246f12cca22e5d872cbfce302ef4d09.webp",alt:"最终冒泡排序"}})]),t._v(" "),a("p",[t._v("刚才的冒泡排序还可以优化。当某次冒泡操作已经没有数据交换时，说明已经达到完全有序，不用再继续执行后续的冒泡操作。如下图元素排序，只需要4次冒泡操作就可以了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/a9783a3b13c11a5e064c5306c261e8e6.webp",alt:"优化后的冒泡排序"}})])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("冒泡排序算法的代码：")]),t._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 冒泡排序，a表示数组，n表示数组大小")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bubbleSort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 提前退出冒泡循环的标志位")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" flag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 交换")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" tmp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        flag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示有数据交换      ")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有数据交换，提前退出")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])]),a("ul",[a("li",[t._v("冒泡的过程中只涉及相邻数据的交换，只需要常量级的数据空间，所以它的空间复杂度为O(1)，是一个"),a("strong",[t._v("原地排序算法")]),t._v("。")]),t._v(" "),a("li",[t._v("冒泡排序中，只有交换才可以改变两个元素的前后顺序。为了保证冒泡排序算法的稳定性，当有相邻的两个元素大小相等的时候，我们不做交换，所以冒泡排序是"),a("strong",[t._v("稳定的排序算法")]),t._v("。")])])]),a("h3",{attrs:{id:"插入排序-insertion-sort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入排序-insertion-sort"}},[t._v("#")]),t._v(" 插入排序（Insertion Sort）")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("一个有序的数组，往里面添加一个新的数据后，如何继续保持数据有序？我们只需要遍历数组，找到数据应该插入的位置将其插入即可。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/7b257e179787c633d2bd171a764171a6.webp",alt:"有序插入"}})]),t._v(" "),a("p",[t._v("这是一个动态排序的过程，即动态地往有序集合中添加数据，可以通过这种方法保持集合中的数据一直有序。而对于一组静态数据，也可以借鉴上面的插入方法，来进行排序，于是就有了插入排序算法。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px"},attrs:{t:"1665301607231",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"4678",width:"200",height:"200"}},[a("path",{attrs:{d:"M512 469.333333m-426.666667 0a426.666667 426.666667 0 1 0 853.333334 0 426.666667 426.666667 0 1 0-853.333334 0Z",fill:"#FFF59D","p-id":"4679"}}),a("path",{attrs:{d:"M789.333333 469.333333c0-164.266667-140.8-294.4-309.333333-275.2-128 14.933333-230.4 117.333333-243.2 245.333334-10.666667 98.133333 29.866667 185.6 98.133333 241.066666 29.866667 25.6 49.066667 61.866667 49.066667 102.4v6.4h256v-2.133333c0-38.4 17.066667-76.8 46.933333-102.4 61.866667-51.2 102.4-128 102.4-215.466667z",fill:"#FBC02D","p-id":"4680"}}),a("path",{attrs:{d:"M652.8 430.933333l-64-42.666666c-6.4-4.266667-17.066667-4.266667-23.466667 0L512 422.4l-51.2-34.133333c-6.4-4.266667-17.066667-4.266667-23.466667 0l-64 42.666666c-4.266667 4.266667-8.533333 8.533333-8.533333 14.933334s0 12.8 4.266667 17.066666l81.066666 100.266667V789.333333h42.666667V554.666667c0-4.266667-2.133333-8.533333-4.266667-12.8l-70.4-87.466667 32-21.333333 51.2 34.133333c6.4 4.266667 17.066667 4.266667 23.466667 0l51.2-34.133333 32 21.333333-70.4 87.466667c-2.133333 4.266667-4.266667 8.533333-4.266667 12.8v234.666666h42.666667V563.2l81.066667-100.266667c4.266667-4.266667 6.4-10.666667 4.266666-17.066666s-4.266667-12.8-8.533333-14.933334z",fill:"#FFF59D","p-id":"4681"}}),a("path",{attrs:{d:"M512 938.666667m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z",fill:"#5C6BC0","p-id":"4682"}}),a("path",{attrs:{d:"M554.666667 960h-85.333334c-46.933333 0-85.333333-38.4-85.333333-85.333333v-106.666667h256v106.666667c0 46.933333-38.4 85.333333-85.333333 85.333333z",fill:"#9FA8DA","p-id":"4683"}}),a("path",{attrs:{d:"M640 874.666667l-247.466667 34.133333c6.4 14.933333 19.2 29.866667 34.133334 38.4l200.533333-27.733333c8.533333-12.8 12.8-27.733333 12.8-44.8zM384 825.6v42.666667L640 832v-42.666667z",fill:"#5C6BC0","p-id":"4684"}})]),t._v(" "),a("style",[t._v("\n          blockquote {\n            background-color: var(--code-color);\n            border-color: #67cc86;\n            border-left-width: 0.5rem;\n            border-left-style: solid;\n          }\n        ")]),a("p",[t._v("插入排序的思想")]),t._v(" "),a("p",[t._v("将数组中的数据分为两个区间，"),a("strong",[t._v("已排序区间")]),t._v("和"),a("strong",[t._v("未排序区间")]),t._v("。初始已排序区间只有一个元素，就是数组的第一个元素。插入算法的核心思想是取未排序区间中的元素，在已排序区间中找到合适的插入位置将其插入，并保证已排序区间数据一直有序。重复这个过程，直到未排序区间中元素为空，算法结束。")]),t._v(" "),a("p",[t._v("如图所示，要排序的数据是4、5、6、1、3、2。\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/b60f61ec487358ac037bf2b6974d2de1.webp",alt:"插入排序"}})])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("插入排序的算法")]),t._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入排序，a表示数组，n表示数组大小")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertionSort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查找插入的位置")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据移动")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入数据")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])]),a("ul",[a("li",[t._v("插入排序算法的运行并不需要额外的存储空间，所以空间复杂度是O(1)，这是一个"),a("strong",[t._v("原地排序算法")]),t._v("。")]),t._v(" "),a("li",[t._v("在插入排序中，对于值相同的元素，我们可以选择将后面出现的元素，插入到前面出现元素的后面，这样就可以保持原有的前后顺序不变，所以插入排序是"),a("strong",[t._v("稳定的排序算法")]),t._v("。")])])]),a("h3",{attrs:{id:"选择排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择排序"}},[t._v("#")]),t._v(" 选择排序")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px"},attrs:{t:"1665301607231",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"4678",width:"200",height:"200"}},[a("path",{attrs:{d:"M512 469.333333m-426.666667 0a426.666667 426.666667 0 1 0 853.333334 0 426.666667 426.666667 0 1 0-853.333334 0Z",fill:"#FFF59D","p-id":"4679"}}),a("path",{attrs:{d:"M789.333333 469.333333c0-164.266667-140.8-294.4-309.333333-275.2-128 14.933333-230.4 117.333333-243.2 245.333334-10.666667 98.133333 29.866667 185.6 98.133333 241.066666 29.866667 25.6 49.066667 61.866667 49.066667 102.4v6.4h256v-2.133333c0-38.4 17.066667-76.8 46.933333-102.4 61.866667-51.2 102.4-128 102.4-215.466667z",fill:"#FBC02D","p-id":"4680"}}),a("path",{attrs:{d:"M652.8 430.933333l-64-42.666666c-6.4-4.266667-17.066667-4.266667-23.466667 0L512 422.4l-51.2-34.133333c-6.4-4.266667-17.066667-4.266667-23.466667 0l-64 42.666666c-4.266667 4.266667-8.533333 8.533333-8.533333 14.933334s0 12.8 4.266667 17.066666l81.066666 100.266667V789.333333h42.666667V554.666667c0-4.266667-2.133333-8.533333-4.266667-12.8l-70.4-87.466667 32-21.333333 51.2 34.133333c6.4 4.266667 17.066667 4.266667 23.466667 0l51.2-34.133333 32 21.333333-70.4 87.466667c-2.133333 4.266667-4.266667 8.533333-4.266667 12.8v234.666666h42.666667V563.2l81.066667-100.266667c4.266667-4.266667 6.4-10.666667 4.266666-17.066666s-4.266667-12.8-8.533333-14.933334z",fill:"#FFF59D","p-id":"4681"}}),a("path",{attrs:{d:"M512 938.666667m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z",fill:"#5C6BC0","p-id":"4682"}}),a("path",{attrs:{d:"M554.666667 960h-85.333334c-46.933333 0-85.333333-38.4-85.333333-85.333333v-106.666667h256v106.666667c0 46.933333-38.4 85.333333-85.333333 85.333333z",fill:"#9FA8DA","p-id":"4683"}}),a("path",{attrs:{d:"M640 874.666667l-247.466667 34.133333c6.4 14.933333 19.2 29.866667 34.133334 38.4l200.533333-27.733333c8.533333-12.8 12.8-27.733333 12.8-44.8zM384 825.6v42.666667L640 832v-42.666667z",fill:"#5C6BC0","p-id":"4684"}})]),t._v(" "),a("style",[t._v("\n          blockquote {\n            background-color: var(--code-color);\n            border-color: #67cc86;\n            border-left-width: 0.5rem;\n            border-left-style: solid;\n          }\n        ")]),a("p",[t._v("选择排序算法的实现思路有点类似插入排序，也分已排序区间和未排序区间。但是选择排序每次会从未排序区间中找到最小 的元素，将其放到已排序区间的末尾。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/32371475a0b08f0db9861d102474181d.webp",alt:"选择排序"}})]),t._v(" "),a("ul",[a("li",[t._v("选择排序的空间复杂度为O(1)，最好情况、最坏情况和平均情况时间复杂度都为O(n²)")]),t._v(" "),a("li",[t._v("选择排序是一种不稳定的排序算法。从图中可以看出，选择排序每次都要找剩余排序元素中的最小值，并和前面的元素交换位置，这样破坏了稳定性。")])])]),a("h3",{attrs:{id:"为什么插入排序比冒泡排序更受欢迎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么插入排序比冒泡排序更受欢迎"}},[t._v("#")]),t._v(" 为什么插入排序比冒泡排序更受欢迎？")]),t._v(" "),a("p",[t._v("从代码实现上来看，冒泡排序的数据交换要比插入排序的数据移动要复杂，冒泡排序需要3个赋值操作，而插入排序只需要1个。")]),t._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 冒泡排序中数据的交换操作：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 交换")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" tmp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   flag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入排序中数据的移动操作：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据移动")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("p",[t._v("所以，虽然冒泡排序和插入排序在时间复杂度上是一样的，都是O(n²)，但是如果我们希望把性能优化做到极致，那肯定首选插入排序。")]),t._v(" "),a("h2",{attrs:{id:"_12-排序-下-如何用快排思想在o-n-内查找第k大元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-排序-下-如何用快排思想在o-n-内查找第k大元素"}},[t._v("#")]),t._v(" 12 | 排序（下）：如何用快排思想在O(n)内查找第K大元素？")]),t._v(" "),a("h3",{attrs:{id:"归并排序-merge-sort-的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#归并排序-merge-sort-的原理"}},[t._v("#")]),t._v(" 归并排序（Merge Sort）的原理")]),t._v(" "),a("p",[t._v("归并排序的思想：先把数组从中间分成前后两部分，然后对前后两部分分别排序，在将排好序的两部分合并在一起，这样整个数组就都有序了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/db7f892d3355ef74da9cd64aa926dc2b.webp",alt:"归并排序分解图"}})]),t._v(" "),a("p",[t._v("归并排序使用的是"),a("strong",[t._v("分治思想")]),t._v("。分治，就是分而治之，将一个大问题分解成小的子问题来解决。小的子问题解决了，大问题也就解决了。分治算法一般是用递归来实现的。"),a("strong",[t._v("分治是一种解决问题的处理思想，递归是一种编程技巧")])]),t._v(" "),a("p",[t._v("归并排序的递推公式：")]),t._v(" "),a("div",{staticClass:"language-base line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("递推公式：\nmerge_sort(p…r) = merge(merge_sort(p…q), merge_sort(q+1…r))\n\n终止条件：\np >= r 不用再继续分解\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("p...r表示数组的开始下标和结束下标。merge_sort(p...q)和merge(q+1...r)，其中下标q等于p和r的中间位置。也就是(p+r)/2。")]),t._v(" "),a("p",[t._v("伪代码表示归并算法：")]),t._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 归并排序算法, A是数组，n表示数组大小")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("merge_sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("merge_sort_c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归调用函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("merge_sort_c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归终止条件")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" r  then "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取p到r之间的中间位置q")]),t._v("\n  q "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 分治递归")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("merge_sort_c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("merge_sort_c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" q"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将A[p...q]和A[q+1...r]合并为A[p...r]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("merge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])]),a("p",[t._v("merge(A[p...r], A[p...q], A[q+1...r])这个函数的作用就是将已经有序的A[p...q]和A[q+1...r]合并成一个有序的数组，并且放入A[p...r]。")]),t._v(" "),a("p",[t._v("如图所示，申请一个临时数组tmp，大小与A[p...r]相同。用两个游标i和j，分别指向A[p...q]和A[q+1...r]的第一个元素。比较这两个元素A[i]和A[j]，如果A[i]<=A[j]，就把A[i]放入到临时数组tmp，并且i后移一位，否则将A[j]放入到tmp，j后移一位。重复上述逻辑直到结束，最后再把临时数组tmp中的数据拷贝到原数组A[p...r]中。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/95897ade4f7ad5d10af057b1d144a22f.webp",alt:"归并排序合并逻辑"}})]),t._v(" "),a("p",[t._v("merge函数的伪代码如下：")]),t._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("merge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p，j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" q"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("，k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化变量i, j, k")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tmp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 申请一个大小跟A[p...r]一样的临时数组")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("q AND j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// i++等于i:=i+1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断哪个子数组中有剩余的数据")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i，end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" q\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("r then start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("r\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将剩余的数据拷贝到临时数组tmp")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" end "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将tmp中的数组拷贝回A[p...r]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br")])]),a("h3",{attrs:{id:"归并排序的性能分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#归并排序的性能分析"}},[t._v("#")]),t._v(" 归并排序的性能分析")]),t._v(" "),a("p",[t._v("归并排序稳不稳定关键要看merge函数，在合并的过程中，如果A[p...q]和A[q+1...r]之间有相同的元素，那我们可以像伪代码中那样，先把A[p...q]中的元素放入tmp数组。这样就保证了值相同的元素，在合并前后的先后顺序不变。所以，归并排序是一个稳定的排序算法。")]),t._v(" "),a("p",[t._v("归并排序的时间复杂度是O(nlogn)。")]),t._v(" "),a("p",[t._v("归并排序不是原地排序算法，归并排序的空间复杂度是O(n)。")]),t._v(" "),a("h3",{attrs:{id:"快速排序-quicksort-的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速排序-quicksort-的原理"}},[t._v("#")]),t._v(" 快速排序（Quicksort）的原理")]),t._v(" "),a("p",[t._v("快排利用的也是分治思想。快排的思想：如果要排序数组中下标从p 到r 之间的一组数据，我们选择p到r之间的任意一个数据作为pivot（分区点）。")]),t._v(" "),a("p",[t._v("遍历p到r之间的数据，将小于pivot的放到左边，将大于pivot的放到右边，将pivot放到中间。经过这一步骤之后，数组p到r之间的数据就被分成了三个部分，前面p到q-1之间都是小于pivot的，中间是pivot，后面的q+1到r之间是大于pivot的。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/4d892c3a2e08a17f16097d07ea088a81.webp",alt:"快速排序分解图"}})]),t._v(" "),a("p",[t._v("用递归排序下标从p到q-1之间的数据和下标从q+1到r之间的数据，知道区间缩小为1，就说明所有的数据都有序了。")]),t._v(" "),a("p",[t._v("递推公式如下：")]),t._v(" "),a("div",{staticClass:"language-base line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("递推公式：\nquick_sort(p…r) = quick_sort(p…q-1) + quick_sort(q+1… r)\n\n终止条件：\np >= r\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("递归的伪代码：")]),t._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 快速排序，A是数组，n表示数组的大小")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("quick_sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("quick_sort_c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 快速排序递归函数，p,r为下标")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("quick_sort_c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" r then "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n  \n  q "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("partition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取分区点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("quick_sort_c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" q"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("quick_sort_c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" q"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("partition()分区函数实际上会随机选择一个元素作为pivot(一般情况下，可以选择p到r区间的最后一个元素)，然后对A[p...r]分区，函数返回pivot的下标。")]),t._v(" "),a("p",[t._v("在不考虑空间消耗的情况下，partition分区函数可以写得非常简单。申请两个临时数组X和Y，遍历A[p...r]，将小于pivot的元素都拷贝到临时数组X，将大于pivot的元素都拷贝到临时数组Y。最后再将数组X和数组Y中数据顺序拷贝到A[p...r]。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/6643bc3cef766f5b3e4526c332c60adc.webp",alt:"分区示意"}})]),t._v(" "),a("p",[t._v("上述这种快排方式就不是原地算法了。如果希望快排是原地算法，那它的空间复杂度就得是O(1)。所以，需要在A[p...r]的原地完成分区操作。")]),t._v(" "),a("p",[t._v("伪代码如下：")]),t._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("partition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  pivot "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" pivot "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      swap "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  swap "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("代码的逻辑示意图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/086002d67995e4769473b3f50dd96de7.webp",alt:"原地分区示意图"}})]),t._v(" "),a("p",[a("strong",[t._v("归并排序和快排的区别在哪里？")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/aa03ae570dace416127c9ccf9db8ac05.webp",alt:"归并和快排"}})]),t._v(" "),a("p",[t._v("可以发现，归并排序的处理过程是"),a("strong",[t._v("由下到上的")]),t._v("，先处理子问题，然后再合并。而快排正好相反，它的处理过程是"),a("strong",[t._v("由上到下")]),t._v("的，先分区，然后再处理子问题。归并排序虽然是稳定的、时间复杂度为 O(nlogn) 的排序算法，但是它是非原地排序算法。我们前面讲过，归并之所以是非原地排序算法，主要原因是合并函数无法在原地执行。快速排序通过设计巧妙的原地分区函数，可以实现原地排序，解决了归并排序占用太多内存的问题。")]),t._v(" "),a("h3",{attrs:{id:"快速排序的性能分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速排序的性能分析"}},[t._v("#")]),t._v(" 快速排序的性能分析")]),t._v(" "),a("ul",[a("li",[t._v("快排是一种原地、不稳定的排序算法。")]),t._v(" "),a("li",[t._v("快速排序的时间复杂度是O(nlogn)。")])]),t._v(" "),a("h2",{attrs:{id:"_13-线性排序-如何根据年龄给100万用户数据排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-线性排序-如何根据年龄给100万用户数据排序"}},[t._v("#")]),t._v(" 13 | 线性排序：如何根据年龄给100万用户数据排序？")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("三种事件复杂度是O(n)的排序算法：桶排序、计数排序、基数排序。因为这些排序算法的时间复杂度是线性的，所以我们把这类排序算法叫做"),a("strong",[t._v("线性排序（Linear sort）")]),t._v("。这三个算法是非基于比较的排序算法，都不涉及元素之间的比较操作。")])]),a("h3",{attrs:{id:"桶排序-bucket-sort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#桶排序-bucket-sort"}},[t._v("#")]),t._v(" 桶排序（Bucket Sort）")]),t._v(" "),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("通排序，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独进行排序。桶内排完序之后，再把每个 桶里的数据按照顺序依次取出，组成的序列 就是有序的了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AsherSun/image-host/blog-img/987564607b864255f81686829503abae.webp",alt:"桶排序"}})])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("桶排序的时间复杂度为什么是O(n)？")]),t._v(" "),a("p",[t._v("如果要排序的数据有n个，我们把它们均匀地划分到m个桶内，每个桶内就有k=n/m个元素。每个桶内部使用快速排序，时间复杂度为O(k * logk)。m个桶排序的时间复杂度就是O(m * k * logk)，因为k=n/m，所以整个桶排序的时间复杂度就是O(n * log(n/m))。当桶的个数m接近数据个数n时，log(n/m)就是一个非常小的常量，这个时候桶排序的时间复杂度接近O(n)。")])]),a("div",{staticClass:"note-block"},[a("svg",{staticClass:"icon",staticStyle:{width:"20px",height:"20px",fill:"var(--text-color)"},attrs:{t:"1665486468429",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16415",width:"200",height:"200"}},[a("path",{attrs:{d:"M944.981319 147.815557l0 413.93759c0 7.367805-3.949962 14.152325-10.345626 17.795295-3.755534 2.13871-93.335758 52.352345-208.80563 52.352345-111.100354 0-181.892677-20.537755-244.355287-38.660508-51.001581-14.797008-95.054913-27.578102-153.035442-27.578102-20.701484 0-40.97318 0.818645-60.262502 2.425236-11.266601 0.941442-21.151739-7.429203-22.093181-18.695804-0.931209-11.266601 7.429203-21.151739 18.695804-22.093181 20.414959-1.698688 41.832757-2.568499 63.659879-2.568499 63.803141 0 112.686479 14.183024 164.445306 29.194926 62.759369 18.21485 127.657448 37.043684 232.945423 37.043684 83.276658 0 152.800082-29.40982 178.219008-41.699728l0-368.963283c-37.83163 16.260335-102.095259 37.647435-178.219008 37.647435-86.663802 0-147.908678-26.125007-207.127408-51.380204-57.827033-24.661679-112.440885-47.962362-190.263321-47.962362-77.218686 0-123.420961 7.592932-148.573827 13.96813-14.612813 3.704368-24.02723 7.429203-29.645181 10.120498l0 750.216473c0 11.2973-9.168824 20.466124-20.466124 20.466124-11.307533 0-20.466124-9.168824-20.466124-20.466124l0-761.657037c0-5.577019 2.27174-10.908444 6.293333-14.766308 6.764054-6.487761 48.770773-38.814004 212.857922-38.814004 86.193081 0 147.263995 26.053376 206.318996 51.247174 57.990762 24.733311 112.768343 48.095391 191.071733 48.095391 94.348831 0 168.477133-36.132942 188.95349-47.205115 6.334265-3.428076 14.019295-3.27458 20.210297 0.419556C941.195086 133.929292 944.981319 140.601248 944.981319 147.815557z","p-id":"16416"}})]),t._v(" "),a("style",[t._v("\n        blockquote {\n          background-color: var(--code-color);\n          border-color: #67cc86;\n          border-left-width: 0.5rem;\n          border-left-style: solid;\n        }\n      ")]),a("p",[t._v("使用桶排序需要满足这些条件：")]),t._v(" "),a("ul",[a("li")])])])}),[],!1,null,null,null);s.default=r.exports}}]);